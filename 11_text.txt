11_wtnabe.txt :  59.9 : 「はい仕事しますはい」
11_yu_kgr.txt :  59.9 : 「しますそうですねはい」
11_katoh.txt :  59.9 : 「大分第11回積んどかないラジオ始めますよろしくお願いします現在は2019年9月4日22時32分です何か22時間した時でも30分はかかるねセットアップねゲストは渡辺さんこの中学テレビの渡辺さんと新しく皆川さんですよろしくお願いいたし」
11_yu_kgr.txt :  119.9 : 「お願いしますはいはいそうですね自分は DMM GAMES というところでフロントエンジニアをやっているものです手で打つと言っても自分ゲーム作ってるわけじゃなくてまゲームを乗せているプラットフォームの開発を行っている感じですお礼までは開発トイレもちょっとチームの組成だったりくるマネージメントどっちら辺のマネジメントよりの役割が多かったんでんエンジニアリングに関してあまり自信感ない感じなんで今日はちょっと勉強しに来た」
11_wtnabe.txt :  119.9 : 「よろしくお願いします」
11_katoh.txt :  119.9 : 「このポッドキャストはアンチ積読で本を読んでその内容をゲストで説明するという Podcast です簡単な自己紹介僕と渡辺さんの自己紹介は第1回を参照してください消そう紹介今日のゲストは皆川さんですよそうしますで皆川さんは初登場なんで軽く自己紹介をお願いします」
11_wtnabe.txt :  179.9 : 「でも前でいつでも」
11_katoh.txt :  179.9 : 「よろしくお願いしますパパ子さんは技術系の本を本を読んでて書いてるけど一応技術系の本を読んでってバグ見たいんだけど例えば今机の上に積んである本でいうとえーとねデザインの骨格とか子なんか何て言うの技術は技術かちょっとマインドとかそっちに入ってんかなとかそういう本もやった方がいいのかなと思ったりはしなかったりしなかったりするんでそういう時は皆川さんぜひお付き合いくださいよろしくお願いしますまあ別に渡辺さんじゃ嫌なことじゃないですよはい前回の反省会とねもう一か月開いちゃったんですが」
11_yu_kgr.txt :  179.9 : 「感じですねどうぞよろしくお願いしますはい自分なんかでよろしければと言う」
11_yu_kgr.txt :  239.8 : 「いやいや」
11_katoh.txt :  239.8 : 「ルビーの法則をやりたいと思っててそのために渡辺さんと僕でやってさらに皆川さん及び指定校素人的な立場で仕事だと言わない自動的な立場でちょっと突っ込んでいただきたいなと思ってこの3人でやろうかなと思っていますして行ってますはいあのねこの間開いちゃったんで3人おっさん集まるってのがめっちゃ難しいとはよくわかりましたやったね色々とね4時ぐらいになると色々イベントもあってねみやかわくん大魔界と思うけどまあまあそういう感じかなと思いましたねそうやってる間に第10回を収録したんですけどちょっとねありがたいことに大物ゲストだったんでめっちゃアクセス数が伸びてもう僕と渡辺さんのメンツが丸潰れ夏の蝶々アクセスで」
11_katoh.txt :  299.8 : 「できればそれでは本当ですよなんでもっとトラの夢針で行こうかなと思ってますねえっとね前回と16年やっぱ色々ミスってスカイプ収録 Skype の録音をそのまま文字起こしやがった御成台だけ抜き出したやつになったんですけどまぁアレでも十分かなっていう気持ちなくらいの音質でしたまぁ悪くないかなと思いますただちょっとね今回のポッドキャストで言う皆川さん的立場の人がいなかったんで僕とゲストの形でそのままソレソレソレソレみたいな感じで進んじゃって細かい用語とかもう1回説明したほうがいいなってところがだいぶすっ飛んだよねそれはちょっともったいないことしたなとしたて音 Google Speech to text API を使って文字起こししてみたんですよえなんでかって言うとこの」
11_wtnabe.txt :  299.8 : 「顔」
11_yu_kgr.txt :  299.8 : 「いやさすがですね」
11_wtnabe.txt :  359.8 : 「ごめんなさい」
11_katoh.txt :  359.8 : 「収録の第3回の時に木刀渡辺さんで activerecord って何時パターンって言ってる本当 ACTIVE RECORD パターンとなるんだよって方があるんだよという話をした時にそれをしてたなっていう覚えはあるんだけどどれか分かんなくなっちゃってどうやって検索しようかなと思った時に家文字起こしなと思ってただけで Google さん Google さんの API を使ってやってみましたルビーのジムもちゃんと Google さん公式のやつのベータ版とはいえあってねだいたいね15秒いくらで課金体系でポストは1時間100円ぐらいですよいま色々試してなんだりかんだりして請求書を先月文8月の回ってきたんですけどまだいたい800円ぐらいしたで面白いことに」
11_katoh.txt :  419.7 : 「東濃に協力するみたいようは秘密じゃなくて Google さんにも API を使った結果なんか統計情報とってもいいよっているとだいぶ割引になるっていう仕組みがあってそれでだいぶ安くできてるみたいですねさらにベータ版もあってベータ版 API 使うとどっちが喋ってるかがわかるっていうことらしくてつまり一つの音声データから加藤が喋ってるとか渡辺さんが喋ってんのか A さん B さんどっちの発言だっていうのが適する出てくるっていうものがあってマジかよと思ってやったんだけど全然ついてないお互いイケボだからかわかんないけどもうどっちが勝とうでどっちが鳴る参加で全然久米つかない音はイマイチだただそもそもね多分加工済みデータってになったので想定されてないんかなとは思いました」
11_yu_kgr.txt :  419.7 : 「どっちが喋ってる国」
11_wtnabe.txt :  479.7 : 「何だっけ会議の音声をそれにかけると分離できるみたいななんかちらっと聞いたことがあって多分その場その距離感とかマイクからの距離距離とかそういうのも多分使うんだと思いますね」
11_katoh.txt :  479.7 : 「あーなるほどねそうやろねえっとね僕大分 Logic Pro X で頑張ってるね声の量はほぼ同じにするように加工してるし行き次の瞬間とか R 4会話が開いた内容とか食って詰めたりしてるんでだから近いから見るとこいつらずっと同じペースで喋ってるし同じせいりょうたはなってて多分区別できないんだよなぁとは思いましたただ今回はね3人別々で音声で作ってるんでまあ値段は3倍かかるんですけどそれぞれ別々であの Text to Speech to text すれば一応何時何分に喋ったとか何」
11_yu_kgr.txt :  479.7 : 「すごい」
11_yu_kgr.txt :  539.7 : 「なるほど」
11_katoh.txt :  539.7 : 「ストリームが始まってから何秒後にこれをしゃべったら取れるんで頭出しさえちゃんとできれば多分正しくて基礎ができるかなと思いますただねこういうほとんど喋ってない時のやつも15秒ぐらいかかるんで本当に値段3倍ってちょっともったいないなと思いますねというわけで前回の反省しろよただじゃ本編入りますかとテキスト化したものだからグリップして頑張って検索した結果 fxloop の第3回の26分44秒あたりから以下のような議論がありました3回目な議論っていうのは activerecord について話してる時に胸張れーたーとかあと保存する時にフックして中身を都合のいい」
11_katoh.txt :  599.7 : 「に変えて保存しますよねとかそういう話をしたんですがデータベースに書き込むときに母データベースにレコードを買ったこれ難しいな ruby on rails のモデルとなるところなんかデータを保存するときにそれにフックしてたとえばユーザーデータの電話番号を保存しようとしたらハイフンを抜く処理とか半角全角統一化するとかそういうことみんなやっちゃいますよねって話をした時にま activerecord 自体がそのいろんな使い分けててアンチパターンと言ってる本もありますよみたいな話題になってパンチパターンって売ってる本もあればこういうパターンもあるよっていう本にも取り上げてるよと会ってその二つについてちょっと議論していこうかなと思いますキロンというかそのそれぞれの本能」
11_katoh.txt :  659.6 : 「activerecord 男だけ抜き出してゲロをしようかなと思います議論違うでしょうかやった僕が選んでそれを説明する番組なんでそういうわけでどっちからやろうかなと思ったんですけどまずは本の若い順にしようかなと思って嘘ついた本が年食ってる順にしようかなと思ってたの一冊目はエンタープライズアプリケーションアーキテクチャパターンで言う2005年の本なんすけど大丈夫皆さん呼んでないよねあれしました僕も渡辺さんを呼んでるんでそれを説明するという本だねとね2005年まだまだ帰るんで割となのですが鳴ってんじゃないかな翔泳社さんから出てる本で著者はみんな大好きマーチンファウラーさん」
11_yu_kgr.txt :  659.6 : 「若い呼んでないしねなるほどさすがです」
11_yu_kgr.txt :  719.6 : 「高校」
11_katoh.txt :  719.6 : 「なんかって言ったらマジ榛名山見ると思うんですけどもそのひとつですねこれこの本裏表紙オペラっとめくると目的別パターン一覧なんて載ってて何かこういうことをやりたいんだけどとか aiko とやりたいんだけどちょっと気に脳みそをにとりあえずパターンを教えとくかと思ったらそれを見るといいんでちょっと便利それを見てあじゃそこだけ読もうかなって言う猫の effective シリーズ的な書き方になってる本なんでそういうパターンでもそういうパターンで拾い読みしながら使うっていう本でもいいかなと思いますでその第10章データソースのアーキテクチャに関するパターンの3番目つわり中の3 activerecord でそのままの項目があって」
11_katoh.txt :  779.6 : 「第10章データソースのアーキテクチャに関するパターンだけで50ページであるんですねその子の10-3 activerecord は5ページぐらい5ページ強くらいでどんなパターンかって言うとデータベーステーブルまたはビューの行をラップしデータベースアクセスをカプセル化してデータにドメインロジックを追加するオブジェクトって事でつまりこれ書いた通り person クラス人間クラスがとして人間クラスのインスタンスがそのままデータベースの中にあるみたいなつなぎ person クラスのインスタンスがデータベースの中でパーソンテーブルの一レコードとして保存されてるみたいな感じの図鑑乗ってて今まさにその通りで rails のモデルもそんな感じなんすよ」
11_katoh.txt :  839.5 : 「ヒューマンて言ったらヒューマンっていうテーブルがあってその1レコードがヒューマンクラスのインスタンス一つですよ9万レコードマーケットネイルビーのルビー方式で言うか Java 方式で言うかで暮らすとか印刷勝手言い方すごい難しいんだけどまぁ今の言い方でも大体みんなわかってもらえるとかそういうわけでちょっといいよいいよ市読むとオブジェクトはデータと振る舞いの両方を持ちますが戸田れいらの部分は永続データであるデータベースに保存されなければならないとて activerecord はこれを使ってデータアクセスロジックをドメインオブジェクトに配置するとすべてのユーザーがデータベースからデータを読み取れ線書き込む方法を把握できるようになったね activerecord のクラスっては以下の書類を持っているというのがパターンでパターにするための方法でまず」
11_yu_kgr.txt :  899.5 : 「SQL コマンドがちょっとわかるぐらいですね変えたいとこ」
11_katoh.txt :  899.5 : 「SQL の結果軍の行かな activerecord のインスタンスを構築する見ながら SQL わかりますあーなるほどでもコマンド分かると思うけどセレクト文学者に好かれセレクト帰った例えば SELECT * from use て行ったらユーザーの中にはパーティクルジャンスカチャその1レコードがちゃんとユーザーの1インスタンスになるって言うのが大事ですよと辛い結果軍の行から activerecord インスタンスを構築するとさらに後で挿入を行うために新しいインスタンスを構築できるでさらに性的な Find メソッドを使用して SQL 共通のスケール計量にアップしてくれコードオブジェクト返すねさらにデータベースを更新し更新したデータベースに activerecord のデータを挿入するとさらにフィールドを取得し設定する」
11_katoh.txt :  959.5 : 「でさらにビジネスロジックの一部を実装するんあって出てはズラズラズラと一切件ですけどもほとんどのほとんどのって言ったら偉そうになっちゃうんで ruby on rails に限って言うと ruby on rails のモデルって真子 Mako 6で行ってみますでビジネスロジックの一部を実装するっていうのがこの本パターンの味噌でとにかくデータベースを扱ってもこのパターンはデータベースを扱ってるって言ってるから言っちゃっていいんかとにかくがデータベースに保存する時とか読み込むときにデータベース直接書くんじゃなくてこのクラスのオブジェクトにマッピングされてるかななんか西武ってやったらデータベースに保存されるしたいんだとか検索ってやるとちゃんとデータベースから検索された結果がそのクラスになって出すの」
11_katoh.txt :  1019.4 : 「になって帰ってくるって言うのはこのパターンのみそのそれじゃあどういう時に使うのって言うとドメインモデルの初期設定で最初に判断するべき選択は activerecord かデータマッパー日のいずれかを使用するかという判断であると AR 最大の activerecord 最大のメリットはシンプルな構造で activerecord の構築は容易であり理解もしやすい最大の問題は activerecord が有効であるのが activerecord オブジェクトがデータベーステーブルと直接対応している同一構造の場合だけという点であると低ビジネスロジックが複雑な場合にはオブジェクトを直接的な関係コレクション継承などを使用したいとまず感があるからしかしこれらの部品は簡単にはキングレコードにマッピングできずまた断片的に追加するとより」
11_yu_kgr.txt :  1079.4 : 「あんまりピンと来たいですねちょっと食いますなんか出ました」
11_katoh.txt :  1079.4 : 「超強力なと以上の理由から DATA mapper の使用を考えるようにするって書いてあるけどもうママここで言う domain Model domain Model 初期設定でっていう1行目のねここでのドメインモデルっていうのはみんな知ってるあのねこうやってオブジェクトがあってクラスがあってでこうこうこう繋がってないとなってんだよっていうモデルソフトねわかるドメインモデル図でググったらすぐわかってますけどこういう感じではモデル間レンズに近い感じだよねなんかねなんか出たでしょってつまるところこうた W 瓶をレンジで牡蠣って言うと選択肢が鳴らないんですよほじ施設」
11_katoh.txt :  1139.4 : 「久保採用した時点でこの最初に判断するべき選択っていうのが activerecord ってなってるんでしたデータマッパーを真っ赤なんでやろうと思えばやれるやりますよねまあそれはなんでかって言うと activerecord の作りがシンプルだから草津一個上に自力で何か作ればデータマッパー机の下っていうかいまいちピンとこないと思うんだけどドメインモデルをドメインモデル図と言うべきかを書くときに例えばゲームの中ではユーザーがいますってなったらまずユーザーと親父に各自ですかでもユーザーって言ったらいろんな情報があるじゃないですか例えばユーザーはいればユーザーの作ったキャラクターもいればなんとかもあればなんとかもあれば会ってでもユーザーって性別と」
11_wtnabe.txt :  1139.4 : 「我慢できなくない」
11_yu_kgr.txt :  1139.4 : 「あーいますね」
11_katoh.txt :  1199.4 : 「年齢ぐらいしかないって行ったらすごいシンプルですかそれだったらですが activerecord でいいんだろうけどユーザーと一言に言ったって属性がもう100個も200個も300個もあるしそれぞれグルーピングされた香田こうでこういう情報がありますっていう場合には果たして activerecord で例えて表現できるのか辛くない辛い場合は寺マップを採用してあのここで言うデータマッパーっていうのはなんかユーザーを保存て行ったら内部的にはいろんなテーブルに分散して書かれるとか多分そういえばどこだと or mapper のだと思うけどもそういう風にやったほうがいいこともあるから検討してねというのがここに書いてあること内緒ねさらにドメインモデルたい曲って何」
11_katoh.txt :  1259.3 : 「なん何かっていうとドメインモデルは今ググってみてくれた画像みたいになんか画像なってるんですかそのモデルを設計してこれをいかにデータベースとかに落とし込んでいくかとかこの世界のクラスにどう落とし込んでいくかって議論なんだけど例えば検索してスコアが1万点以上だった人にボーナスを開けるボーナスをあげるともっとくらい的に言うと例えば1万点以上取ったユーザーを選択してその人にお金をお金レコードを1万円振ってやるとするとじゃあそれのためにドメインモデル書いて何するかって言うと別にそんなことやらなくても SQL で5行ぐらいで使って」
11_katoh.txt :  1319.3 : 「何でこの対局はトランザクションスクリプトなんすば上から順番に選択してそのユーザーにこういう処理をするという一つの関数で終わる的なことなのでここでのドメインモデルっていうのはやめた通りそのまだトランザクションスクリプトで来られたらまた複雑でかつさっきみたいに保存する時にあったとかヒットポイントが0以下になったら死んでることにするとかそういう複雑なビジネスロジックを持つ場合はまあその使いましょうねっていうとまあそういうわけでドメインモデルとか出ちゃった activerecord」
11_yu_kgr.txt :  1319.3 : 「トランザクション」
11_katoh.txt :  1379.3 : 「データマッパーつのトランザクションするとの話をしたんだけどそういうわけでそういう世界があるわけですよ一つのオブジェクトが一つのテーブルの一つのレコードであるっていうのはあまりにも単純でいいんだけどざっくりすぎて彼が複雑でしょうっていうパターンが世の中にはありますとでも ruby on rails を選択した時点でまた愛撫 activerecord の採用っていうのはもう選択肢としてはもう先選択してて後ドメインモデルとかこだわる人から見るとこれちょっと抽象化がきつくないとなんかも実質データベースアクセスなっちゃってるじゃんっていう気持ちになるそれ難しいかまあそういう気持ちになるんですよ」
11_yu_kgr.txt :  1439.2 : 「そうなると直接書いちゃったから実質みたい」
11_katoh.txt :  1439.2 : 「たとえばユーザーとユーザー詳細っていうものあるとしたらそれを JOIN して持って来ないとなるともう activerecord だとも露骨に書いちゃうんすよもうユーザーはユーザー詳細っていうのは持ってますみたいなのもうコードに書いちゃうんでそれでデータベースの中身がどうなってるか知らないと書けないシンプルでいいんですけどだけどユーザーデータを保存ってやるときにユーザーデータを保存したいんだって内部的に実はユーザーの中身はユーザー詳細とユーザーの財布とユーザーのアイテム取っていう風に分かれてますよ」
11_yu_kgr.txt :  1499.2 : 「ドナルド髪してる内科」
11_katoh.txt :  1499.2 : 「知りたくないんです他に保存で保存して欲しいかなんで重症度が低くなっちゃうんじゃねもうデータベースの中身知ってないと実質かけなくねっていうのがまあ activerecord の辛いじゃねって言われて男の人つまそれで rails activerecord も長そういうもっと抽象と高く使えるようにいろんな機能が提供されててさっきまたねさんがおっしゃったようにあると思えばできるところもあってここで書いてあるようなオブジェクトを直接は関係とかコレクションとか検証などを利用したい場合には activerecord に実質マッピングできなくね難しくねっていうのを解消できるように色々メールには STI single TABLE インヘリタンス」
11_wtnabe.txt :  1559.2 : 「買っちゃったけどやらない方がいいなとは思ってますあーやっぱりいらんもん大半の前にいらんもんみたいなのができちゃうんでやっぱ世紀かちゃんとした方がいいよねっていう気持ちになりましたコードはシンプルになってそれに紐付けた画面もシンプルに作れるんで嬉しいんだけどデータ的にはやっぱりなりますよね」
11_yu_kgr.txt :  1559.2 : 「カインズ化粧テープのロード」
11_katoh.txt :  1559.2 : 「単一継承テーブルとかね一応がんばってはいるんですちなみに STI バトルだそうですかその心はテーブルリゾートあさってつとも答えますよねちなみに STI 女優リストなってるかっていうとじゃあ僕がさ」
11_yu_kgr.txt :  1619.1 : 「株講座動画に対するなんかラベル的な」
11_katoh.txt :  1619.1 : 「死んじゃった例えて言うと手繰ったじゃなタグタグ例えば動画を投稿できるサイト作ったとしてはまず動画っていうことなんでしょ動画ってテーブルがあって動画を中身がそこに保存されているとそこの動画にタグを付けられるようにしようかって思ったんだけどタグにはよくよく考えて種類があるぞとか例えば地域タグどこで収録したかっていう地域のタグとジャンルのタグが赤坂とその動画に対していくつもこれはどこどこに関係するものですっていうタグラベルを付けにあたり同ジャンルに関して」
11_katoh.txt :  1679.1 : 「でホラーでサスペンスですとかそういう子いくつも付けられるようにしたいという場合に確認種類があるか分かったとんだけどうまいことを設計すると動画にタグが付けられますと照れ隠しでますねどうすると動画はず目にタグ動画はたくさんのタグを持っているとにかくとねそうするとデータベースの中には家具っていうテーブルができるチャンスだけどさっき言った通り宅には種類があるんですよね種類をどう実装するかっていう場合なんすけどここで STI を使うとたとえばジャンルタグっていうクラスを作って地域リージョンタグっていうの作ってねパグクラスを継承するんですよ」
11_wtnabe.txt :  1739.1 : 「海タイプ」
11_yu_kgr.txt :  1739.1 : 「ぽぽぽぽーん」
11_katoh.txt :  1739.1 : 「そうするとこの動画に対してタグと言ったら家行きたくも吊るしジャンルタグも取れるんだけどちゃんと内部的にはタグが2種類あることが保存されてる T クラスは三つあるタグっていう気が既存クラスとそれを継承した地域タクトジャンルタグがあってそれどういう風に実装されてるかって言うとデータベースを見ると思いっきり書いてあるんですよこのレコードは家具テーブルの中に俺は何とかっていうクラスのインスタンス S 四つネームでしたっけタイプでしたっけ明日タイプだから礼ですがタイプは予約子さんなのでまず動画にタグ付けたいよねって言って」
11_katoh.txt :  1799.1 : 「設計するときに味が動画にタグ付けようにしときますは雪ってそうしといてタグはタグでもジャンルがあってなんとか勝手である日突然いや監督誰でも欲しいと言われた時にこれ単純にタグを継承して監督たくて作ればいいだけなんで楽でしょうって話します風呂は元の設計も変えずにタグのテーブルの中身も変えずにも使えるじゃんっていうのがこの STI のいいところなんだけど今ちょっとそれに中身見るとこれだったらジャンルタグって言うた後すぐとかバグって作っといてさらに正規化して声の種類とかそういうのは真面目に実装した方がいいんじゃねっていうのが私の見解で終わり僕の見解でもありその石鹸の闇悩ましいところなんすよねとまぁ何が言いたいかって言うとここではこの2005年でた本では」
11_yu_kgr.txt :  1859.0 : 「ワールド呼んでないっすね良いって言うんだけど誰」
11_katoh.txt :  1859.0 : 「そういうのは難しいでしょって言ってるんだけど落ちぶれ理と頑張って際の対応しようとしてる人っていうのが動いた買ったことなそれともあそういうことで今のところこの本で言う activerecord っていう立ち位置が強かってくれなと思いますしドメインモデルでカチカチ考えちゃうような人にとっては物足りないところもあれば十分なところもあるよっていうのが今わかったところそれたいさてそういうわけで次は2013年れた SQL アンチパターンっていう本これは読んで最初安心しました読んでると番組なら大体この本の24章マジックビーンズかっこ魔法の豆って言うね」
11_katoh.txt :  1919.0 : 「名前がね例えば23章ディプロマティックイミュニティとか25勝砂の城とか光熱厨二病心くすぐるこのタイトルが大好きな強されたシャワー浴びるカービン3ビル仮眠さんは僕と戯れておりませんさすが日本語 Wikipedia に言っても名前がね見当たらない模様で邦訳版は2013年1月25 Amazon と1日出てるけど中で寝ててオライリーさんから手手手手感や慣習翻訳の漢字ですねみんな大好き T wanna さんがいらっしゃるということでこの本はジャパニーズだなみんな読んでる本ってことになってるわけですよねこの本も私みたいになんか気になるところだけ読むってのももちろんありだ感じでこの24勝目」
11_yu_kgr.txt :  1919.0 : 「競走馬だから見たことあったわかったこと」
11_katoh.txt :  1979.0 : 「ジーンズかっこ魔法の豆っていうのは15ページぐらいの内容でこの本はそのタイトル通りアンチパターンが説明されてるんですけどまずまず目的アンチパターンのな解説5アンチパターンの見つけ方でこのアンチパターンを用いても良い場合の五将建で怖くてくれこの字で書かれてますこの24章の最初は何でこんな小さな機能を追加するのにこんな時間かかるのって調子が激おこでご部下に対して詰めるんだけど部下が頑張って言い訳するっていう寸劇から始まるそうですで effective Ruby の会に出たんですけどこの本のタイトルは SQL アンチパターンてタイトなのにこの24章マジックビーンズは」
11_yu_kgr.txt :  2038.9 : 「なんだって」
11_katoh.txt :  2038.9 : 「ただ卒業も生 SQL が出てこないしたらこういう風に SQL を扱うのアンチパターンだよって言ってるてねじゃあまず24-1目的えっとねほとんどのフレームワークがまず NBC を採用してますよねとて MVC の素人でも分かるし俺もはいはい入ってすぐ分かったのはコントローラとなんでかって言うとコントローラーはユーザーのアクセスが操作について処理してビールは見た目に対して対応しますよだけどホモデルって何っていう花じゃんそれでも出るってわりと曖昧で曖昧ってことはなんでかって言うとそこになんでも入れる」
11_katoh.txt :  2098.9 : 「何でも入れたいから曖昧なユーザーが操作するクリックするんだがアクションするそれを理由に返すって言うまでの間にかしなきゃいけないことを全部モデルって呼んでる同じ手術はみんなプログラマーだが一般化とか中小かは大好きでこうつまりこういうことでしょっているに行ってくるんですけどそれのつぶしがきくように作りたいですかこの場合はある場合はっていうのがあるんでてみたらみんな一般化したいってのが前提でその連するとこう突き詰めに突き詰めて汎用性を上げていくとこれ全然便利じゃなくて単なる何て言うのレコードを選んで保存してユーザーに見せるみたいなアホそうしたら余計かレコード」
11_yu_kgr.txt :  2158.9 : 「伝書鳩的な」
11_katoh.txt :  2158.9 : 「データベースを読んでそれを表示するだけのものになりがちなんですそうねえ何て言えばいいんかなえと rails activerecord をかけますと言って rails activerecord のモデルにするとなんかめっちゃ便利なんすよ特に実装しなくても検索は出来る子保存は出来る子データの加工はできるしたこれでええやんとデータベースアクセスそうすると何が起こるかって言うとモデルはそのままで GO コントローラーのところにユーザーが好アクセスがあったらこのモデルを選んであのモデルを選んでそのモデルを選んでこれをこうかこうしてとポイントが何千以後お子様だったらこうしてクリティカル率が7%だったからなんだむひで何とかって何とかして言って」
11_katoh.txt :  2218.8 : 「全部コントローラーに書いちゃうとなんでかって言うとモデルが汎用性高いものにしておくとつぶしがきくからそうすると全体的に見て rails MVC ってそういうのにコントローラーを書いちゃうと単なるテーブルデータベース Access オブジェクトになっちゃうねって話が逸れそういう状況において24.28パターンモデルが activerecord そのものではまず2005年 Martin Fowler はこのようなマッピングをサポートするデザインパターンを activerecord と名付けましただってさらにその前年にせんよねこの本」
11_katoh.txt :  2278.8 : 「日本語訳が出たのが2005年だから多分そのほぼ同時期くらいに出たんでしょうね rails が2004年に登場してみんな使うようになってベア他の Web 開発プロジェクト他の Web サイトフレームワークでもデータアクセスオブジェクト設計としては皆さんに教えると大体僕らが Web のフレームワーク採用しようぜって言ったらもう ACTIVE RECORD パターンのものを1年使うことが多いとかが前提ねこの本曰く activerecord 自体に問題があるわけではありませんと activerecord は単一テーブルの各行に対するシンプルなインターフェースを提供してくれる優れたパターンですとアンチパターンになってしまうのは MVC アプリケーションをすべてのモデルクラスの activerecord の基底クラスを継承するという規約ですこれは黄金のハンマーアンチパターンの例だと言えます」
11_yu_kgr.txt :  2278.8 : 「黄金の花」
11_yu_kgr.txt :  2338.8 : 「ドナルド」
11_katoh.txt :  2338.8 : 「つまり何でも出来る時とこれを読んで rails ACTIVE Model じゃなかったアプリケーションモデル化アプリケーションモデルってファイルを開いてさらにそこから派生するモデルを開くと気付くんだけど rails って全部同じアプリケーションモデルアプリケーションモデルってどう継承して各モデルクラス作ってるんですよ NG じゃんということなんだけどよくよく読むと黄金のハンマーアンチパターンってことはまぁ全部その基底クラスに書いちゃって何でもそのクラスでその基底クラスで解決させようとしちゃうかな変なことになっちゃうって言いたいのかな」
11_katoh.txt :  2398.8 : 「ってのがまずここで思ったことね俺ので24点2点異なりどういうことかっていう話説明に入るんですけどシンプルに1クラス1レコード1クラスインスタンス市レコードと言うべきかな1年算数1レコードとするとデータベースをリファクタリングすると例えばなんかこれを追加してあるよねとか今まではユーザーのマネーって返したけどお財布っていろんな機能を持たせたいかなユーザーお財布っていうテーブルを作ってその所持金ので誰かが全部そっちで引っ越ししようっていう風にリファクタリングしたとか逆に絡むを増やしたとかそういうことをやるとマジでビデオうまいことをリファクタリングしてハートのデータ構造を表す場合モデルクラスだけじゃなく」
11_yu_kgr.txt :  2458.7 : 「協和会」
11_katoh.txt :  2458.7 : 「そのモデルクラスを使うアプリ全体アプリのコード全体も変更する人がありますよと駆け続け読むとまたアプリの新たな画面を処理するコントローラ加える場合モデルとのやり取りを行うために既存のコードによりな行動コントローラー書く必要が出てきますとなるんですけど何そのそのデータベースを開くたリングして行動を変更しなくていいことなんてま実際ないと申すか申すは大きく変える場合ってのはまぁ必要があるなそうだよねと思いますでさらに言うと僕昔 Java JSON 数値フレームワーク痩せた時に横からの触れるたびにクラスの定義変えたりしてたんです」
11_katoh.txt :  2518.7 : 「今日はこの空の増えたってことはこのクソのカラムを表す変数がクラスに追加されるからだからデータベースを何か変えるためにクラスファイルをめっちゃ全部再作成させてたんすよなんかちゃんとツール使っててまあその結果としてコンパイルエラーになったりするから楽っちゃ楽だったんですよただでビデオリファクタリングするため空に DB を編集とか修正するために行動クラスを変えなきゃいけないっていうのは結構重さだったなーっていうのは今でも覚えてますが今はその曲何かかつ rails とかやったねそんな彼女が増えたから何やってたことないんでなんか使う言語によるのかなっていう気持ちはあるんだけど」
11_katoh.txt :  2578.7 : 「後はねみゆのための書類をコントローラーで書いて地獄のようなコントローラーができるって言うのはまぁアレなのでなんか知らんけどコントローラーにめっちゃなんか知らんけどって言っちゃあかんとかなモチベとしては楽だからなんかなとにかくこれはよそのコントローラーにも書いてあったよねーとかっていうコードがコントローラーにめっちゃ入ると手が僕とシロアリがあるかなと思いますただそれつられてくるアンチパターンだよっていうのがあ activerecord を採用したがばっかりに発生することだよっていうのがこの24点に元気に書いてあることねねさらに24.2でには activerecord はクラッド機能を公開してしまうとクラウド機能 is create read read か映画 Update delete 機能を公開してしまうので」
11_katoh.txt :  2638.6 : 「まずさっき言った基底クラスにクラッド昨日はだいたい実装されるんですよねアプリケーションモデルに実装されてるんで本当はもっと上のクラスでテストされるんだけどねとなるとそれを継承したクラスは全部 public notary を持ちますとそれを公開してしまう問題がありませんだからさっきのユーザーユーザーも持つお財布のユーザー財布テレビの家の作りましょうねっていう約束があるとしてユーザー財布のクリエイトが誰でも使える状況っての変でしょって肌それではまずユーザーがあってそれに従属していると財布がありますよとかそういう仕組みなん」
11_yu_kgr.txt :  2638.6 : 「なかなか強い」
11_yu_kgr.txt :  2698.6 : 「パブリックだからちょっとね」
11_katoh.txt :  2698.6 : 「クラッドが硬化し普通に作ったらそのユーザー財布はいきなり作るっていうメソッドはどうもなくてもいい公開されてちゃいけない字んだけど検証するもともとに書いてあるから今公開しちゃうよねとそれで美術の軸に沿ってレコードを作成しないといけない子の約束守ってねっていうのが口約束になってコード上ではパブリックのちゃってるんでいまいちだねっていうのがこの他に書いてあることでここのサンプルだとバグクラスさっき今説明したらユーザーのユーザー財布だったけどそうじゃなくてこれはバグクラスに関東をつけてで担当がついたら担当着いたよってメールを送るってロジックやりたいんだけどバグクラスが」
11_yu_kgr.txt :  2758.6 : 「なるほどだから口酸っぱく運用でカバーと言うか確認しないといけないみたいな感じになっちゃったね」
11_katoh.txt :  2758.6 : 「タントをつけて着いたよってメールを送るってロジックをバグクラスの例えば専用のメソッドを作って書いとくとそれをパブリックにして他がプライベートだったらなるほどとバグクラスマグオブジェクトを作る時にはこの関数を使って作成すればいいんだってみんな分かるんだけど来てクラスにクラッドがあるんでそれをガン無視していきなり作成できちゃうっていうのはそのビジネスロジックスキップしちゃってるでしょっていうのがここで書いてあった駄目だねと言うかいまいち慣れそうそうなサンプルリクルートが出なきゃいけないすかね」
11_katoh.txt :  2818.5 : 「他に24.2連3 activerecord はドメインモデル貧血症をもたらすとモデルはシンプルな dao とするとデータアクセスオブジェクト寝ない基底クラスが同じでそういう状況においてクラッド以外 create read Update delete 以外のビジネスロジックはどこに書くかって言うとこうさっき言っちゃったのと同じでモデルっていうのはモデルを作成して選んでアップデートしてデリートするのが仕事なんだって思ってやっちゃうとコントローラーに全部解除それほど本当はビジネスロジックっていうのは5モデルの中に入って欲しいんですよモデルに移乗して例えば」
11_yu_kgr.txt :  2818.5 : 「ナルト」
11_katoh.txt :  2878.5 : 「現金が増えましたよっていうのはユーザーの現金増えたよってメソッドを呼びたいんであって間違ってもうコントロール中でユーザーをセレクトしてユーザーの財布をセレクトしてユーザーの財布に所持金が1万円増えるようにしてねデータベース保存終了するって言うのコントローラーに履くってのはイマイチ合ってない間違ってるなされた結果として凝縮度が下がるとユーザーの処理は use クラスにとっているべきなのにそうじゃない電話をポストの登場しましたマーチンファウラー先生がお風呂の中でドメインモデル貧血症と姉みっくドメインモデルと呼んでいるとモデルの中に閉じてるべきものがコントローラーにダラダラ出てじゃあお金を増やす処理が発生した」
11_yu_kgr.txt :  2878.5 : 「ドメインモデル貧血症」
11_katoh.txt :  2938.5 : 「全部コントローラーそれ書くのかよそういうことが発生したのそれなんでこれ変じゃないですけど下がってないって何て言うのでドメインモデル貧血症とアクティブレコードを扱うコントローラークラブ会員様です activerecord 扱うコントロールプラスの行動は厚化粧の実況お手続き型アプローチで書くことなりがちですと今のつけてねさっき言った通り金が増えて場合にはユーザーをセレクトして財布をセレクトしてその中にの1万円あってセーブして終わるというような血液型プラスなっちゃっててデータベーススキーマの変更アプリケーションの仕様の変更がある場合これを全部変更しちゃいけないとさっき言った通りユーザーを選んで1万円増えたよって書くだけでいいはずなのにすいませんお財布の中にさらになんとかっていうクラスが増えてそっちの方に所持金は移動し」
11_katoh.txt :  2998.5 : 「当たってたらコントローラー全部にユーザーを選択してユーザー財布を選択してユーザーマネーを選択したという風に全部はしかいなきゃいけなくなっちゃったそれで雨でしょうというのがここに書いてあることというわけで何でマジックビーンズって言って言うかって言うとモデルが単純なデータアクセスオブジェクト勝手てクラッドも公開されててそれをみんな都合のいいように呼び出すからこう複数のコントローラーと複数のモデルがもそれぞれぐにゃぐにゃにつながってみようというわけで敦賀から割る魔法の豆ということでマジックビーストいるこの感じ方も読んでるらしいですねさらにダメな理由が書いてあってユニットテストが難しいでしょうっていう花じゃそれで実質そのお金が増えるっていうのはユーザーに」
11_yu_kgr.txt :  2998.5 : 「なるほど」
11_katoh.txt :  3058.4 : 「落とせなかった場合にモデルのテストってデータベーステストになっちゃうんですよだって蔵人しかメソッドないんだからさ作成できますか入れます勝手にやっててそのデータベースが必要になっちゃうしそのビジネスの時間でしためっちゃ難しくなると手間ビューア家に入った置いといてコントローラーのテストほとんどの場合の Web フレームワークのコントローラーって http のリクエストを処理するところは何で誰かが誰か例えばお金を増やしてテストしたいだけなのに activist を擬似的に発生しなきゃいけないとそれってどう何て言うのが大変だしかつ hgtv にテストするとリクエストした帰ってきたそうな髪をパースするとかデータベースの中身がちゃんと変わったかどうかでテストしなきゃいけなくなっちゃうんでまぁテスト大変だよねってのがここに書いてあること」
11_yu_kgr.txt :  3118.4 : 「見つけこと」
11_katoh.txt :  3118.4 : 「というわけでここでやれよって言ってるのはまぁデータベースアクセスからビジネスロジックをデータベースアクセスからビジネスロジックプレゼンテーションからビジネスロジックビジネスロジックをちゃんと分離できれば正しい MVC の目的の達成に役立ってちゃんとテストできるなるよねテスト改行できますよねというのがここのテストはこんなんでしょってどこに書いてあること面白くて次にはアンチパターンの見つけ方これはアンチパターンの見つけ方ってこれ面白くて我々ソースコードを読んでこれアンチパターンじゃんじゃなくて後仕事の上でやってる上でこういう発言が発生するっていうのはもうこのアンチパターンに陥ってるパターンですねっていう発言が声色に乗ってて例えば持ってればモデルにカスタム SQL クエリを渡すにはどうする」
11_katoh.txt :  3178.4 : 「いいですかっていう質問が上がったらそれもモデルとデータベースっていうのがちゃんと分離できないじゃんそこへんだよねと言うとか9月のモデル操作を全てのコントローラーにコピーすればいいんだろうかそれとも親の抽象コントローラクラスに一回だけコーディングすればいいんだろうかくらいで書いてあるのはこれがさっき言った通りじゃあユーザーのお財布を断る金額だけ増やすっていうロジックを作ったとしてそれをコントロール汗に書いてあったらそれをコントローラーのメソッドでしたね共通メソッドとしてコントローラクラスの親クラスにお金を増やす場合はこの子のコントローラーのこのクラスではこのメソッド便利なで使ってくださいという風になると」
11_wtnabe.txt :  3238.3 : 「標準だと思いますあの書き方が柏 CSV 使えたけど今使えないとかは変わったけど PIXTA 自体は表」
11_katoh.txt :  3238.3 : 「いやいやいやいや角度が間違ってるよってなっちゃったんだから複雑なモデル操作をどこのコントローラーに書けばいいんだって昨日も出るって事はお父さんと違っちゃってるじゃんそこだとさらにこれはもう僕の得意なやつなんすけどモデルにバグがないかユニットテストするためにデータベースフィクスチャーをもっと書かなきゃいけないんだよとこれなんのこっちゃってるとデータベースフィクスチャっていうのはテスト用のデータベースを作る2だと思ってください rails 6ちゃって今標準まとめの標準今」
11_yu_kgr.txt :  3298.3 : 「ナンネット」
11_katoh.txt :  3298.3 : 「まだやめる使うと簡単にできる行ってめっちゃ簡単でたぶんねここではこの本かこの本はアンチパターンと言ってるけど僕の僕らの認識ではそれをアンチパターンにせずにむしろ簡単なんじゃないじゃんっていう解決アプローチなじゃないかどうか買って持ってんだけどテスト用のデータベースをめっちゃ作んなきゃいけないんだけどてるって事はこれデータベースのレコードで全部表現しようとしてるよねって言うなのでデータベースはもっと書かないといけないんだけど言われたらこれお前そういう目にデータベースのレイヤーうまく注射ができてなくないっていうのがバタンとして見つかるという話逸れないで24.41パターンを用いても良い場合」
11_katoh.txt :  3358.3 : 「長々と書いてあるけどほとんどの場合家を出た人と星と十分だしプロトタイプ作成にも十分やろうというのがここに書いたプロトタイプ使えるぐらいだってこれでええやんって複雑じゃないのでこれでええやんというのがマンコに入ったことではどこまでが複雑どこまでが簡単かと思うけどませいぜいだけど僕から言わせればまあ買い物するくらい例えば EC サイトぐらいだったらよっぽどのことがない限りにだいぶこの8パターンで庭園をで十分じゃないかなとは思うよただブログサイトとかそのぐらいだっただいぶいいので自分だけなさい通販サイトにしても他に買って売ってて買ったらかなと思うけどまあ例えばでも消費税が経てば今度は0.8%10%をはちぱーせんと」
11_yu_kgr.txt :  3418.2 : 「だいぶ」
11_katoh.txt :  3418.6 : 「10%が混在しますとかなとだいぶだいぶ降ってくるんでもう dao じゃ足りないかもしれないけどそういう風にシンプルだったらこれでもいいね俺はそれぐらいで待っ簡単なブログサイトとか通販サイトくらいだったらシンプルだし十分店ないかなと思ってますけどほとんどば十分だして次24.5解決策か魚拓はモデルが activerecord を保つようにしましょうとなんのこっちゃんって言うとまぁコントローラーは入力を処理してビューワ出力をするモデルは万能な解決策を提供することは難しいというの受け入れてなんでかって言うとかアプリの残りの部分」
11_katoh.txt :  3478.2 : 「ゆうたが来そうだしたコントローラー一緒にするこういう風に見せる水処理する残りの部分っていうのはもうオブジェクト指向設計モデリングとか domain DRIVEN 設計とかそういう世界な話だから万能な解決策っていうのをモデルに持たせるって何難しいということでモデルが activerecord 持つようにする au のはつまりそういうことでここでいうモデルは MVC で言う M ね ruby on rails の夢じゃなくてなんであくまでも MVC の M モデルの所にの軸があってねさらにそのロジックを実現するために内包してるものが activerecord データベースに保存したりなんだりするって」
11_katoh.txt :  3538.2 : 「やりましょうねっていうのがここで書いてある解決策モデルが直接 activerecord じゃなくても出る activerecord 使う言葉ある使うことも多いぞロジックの実現としてそれを使うというのが欠けてしまったさらに24.5日モデルを理解するモデルをデータベースオブジェクトが分離する際の設計判断の参考というのでこういう考え方がありますよって違う違うのってんですよねその参考情報としてこういう単語がありませんのってててれば情報エキスパートっていうパターンがあってインフォメーションエキスパート操作の責任」
11_yu_kgr.txt :  3538.2 : 「なるなるどモデルが持つんじゃないほうしていて使うこともあるよみたいな情報エキスパート」
11_katoh.txt :  3598.2 : 「オブジェクトはその操作を果たすための必要なすべてのテーブルを持つべきであるとだ先でのユーザーに関することを処理するっていう責務をユーザーが持ってるとそのユーザーが関係するモデルユーザーのお財布だとか言うかの経験者とかはユーザーのキャラクターだとか赤いゲームゲームを前で走ってユーザーの持つとあるキャラクターだがユーザーの持つカードとかそういうものは全部ユーザーが全部 Access 行に持ってることって言うんで activerecord データアクセスオブジェクトと先方のシンプルなクラウドとモデルの関係ってのは何ではないといざっていうのは今の rails みたいにユーザーと言ったら use Table play the use クラスっていうのはユーザーていないユーザーテーブルは使いますよって内部的に実装されててもう use OBJECT is use CLASS」
11_yu_kgr.txt :  3658.1 : 「治るいつ」
11_katoh.txt :  3658.1 : 「with you the table 色になってるのはこいつらなんだけどそうじゃなくてユーザーはユーザーっていうテーブルとかその他もろもろっていうのこもってる所に行ってねあれば情報エキスパートですよと乳がんに関する情報エキスパートはユーザーですよというザクラスを使いなさいよっていうのが分かるとちなみに rails の activerecord は完全にそうですよただまあ外れ2位とかはず1とかはずなんとかでそれっぽくは見せることできますけどでも実質はまいずなんですけど死んで次青菁社クリエイターモデルがデータベースを扱う方法は外部に公開されない内部実装の詳細があるべきであると説い create use ってやったら普通は優雅ができるんですけどそのユーザーができ」
11_katoh.txt :  3718.1 : 「つまりどういうことかっていうのはコントローラーとか操作聖書には分からんじゃんですが内部的には動いてるって言うほどリスクが高くさらにコントローラビューはドメインモデルのインターフェイスを使用するべきですよと隣クラウドを直接開けませんとこれまで繰り返しててですよねでも rails もねヘルパーとかそのモデルのスコープとか色々駆使してまあだいぶ見えないようには頑張ってるんですけどでもね実際はねモデルの内部実装を知らないと高パフォーマンスのために竹はもうあらかじめ JOIN しておこうとかあらかじめ何とかしておこうとかあらかじめ設置して怒っていうのがなかなかできにくいなーとは」
11_katoh.txt :  3778.1 : 「思います直接そう直接ただ僕がここで言いたかったのは結局内部実装を知らないと使えないモデルっていうのは多いよね特にパフォーマンス周りはそれいるよねっていうことが多い県はいたが例えばあらかじめ JOIN しときたいとかあるじゃんですか例えばユーザ一覧とユーザーの所持金一覧脱出するとユーザーとユーザー財布テーブルを JOIN してその結果から表示したでしょた中島淳一社会と何があるかって言うとユーザー市データを表示しますユーザー市お財布のデータを SELECT します Part 2ユーザーには表」
11_yu_kgr.txt :  3778.1 : 「毎回直接叩いちゃうことになりかねないと思う」
11_katoh.txt :  3838.0 : 「ユーザーにのお財布を表示しますっていう一覧出す時に100レコード表示したら着剣セレクトが走るとあさっ検査薬としてさらにユーザーデータの仇一覧は市セレクトはから市セレクトプラスそのユーザーごとの詳細って客席で始まったでもジョインしちゃってデータゲットしとけば1世紀の敵でしょだけど一覧をくれっていう側としてはユーザーの中見て知りたくないですかでは use クラスを実装する人にとってはお財布のお金がどっから持ってくるかなんて use クラスを呼び出すとは知らなくてもいいように作りたいのにパフォーマンス問題出るときは割と中身してないと使えない実装できないってことがあるんじゃないかなっていうのが現状なのかなっていうのがコンプ子供ってことね」
11_yu_kgr.txt :  3838.0 : 「なるほどなるちょっとなんか頭の中でグラフ QL にしたいもの分かります」
11_yu_kgr.txt :  3898.0 : 「北フロントから叩く時が大体それとかって誰」
11_katoh.txt :  3898.0 : 「あーなるほどねですか馬鹿いや僕はもう完全につけるしか出てこないから広岡老害の1であでもこれと言って特にメソッド名何もめっちゃ悩むんですよただ今言った通りユーザー一覧を出すっていうメソッドはタダリストっていうのユーザークラスに生やして皆川3 use 一覧を出すときはこのメソッドと堪えてください言うじゃんねそれそれして財布所持金一覧を出したら加藤さん100回するとしてて遅くて使い物なんなんですけど会ってなるじゃんそうすると分かったじゃあお財布の中身もついでにか」
11_wtnabe.txt :  3898.0 : 「新しいすね先にグラフ9エルが出てくるんだなっていう」
11_yu_kgr.txt :  3958.0 : 「毎回なロナウド」
11_katoh.txt :  3958.0 : 「すっていうメソッドそれは結果ユーザークラスにユーザーリストリストアンスコお財布とか作っちゃうねそうすると皆川さんあのお財布の中身表示の時はこれ使って寝てやると USE WITH THE List with お財布ってやって血が出て暖かくなりましたはずだったんですけどアバター画像を表示するとするとまた百間センターんですよってあとちょっと待ってくれたじゃあリストを見せ財布水アバターとかになってなんかどんどん苦しい苦しい苦しいって言って苦しくない方法としてアンチパターンに戻ってきますよあの稲田さんジョインするテーブル一覧で私と背中でうまいこと言っとくからアダルト田舎さんやそのテーブルに知らんしてもんだけど潰しがきくっていう子加藤さんのアンチパターンにはまってじゃあ後はデータベース」
11_katoh.txt :  4017.9 : 「脳漿くださいとそれ見て女と駆出しなっちゃってそれコントローラーが重くなっちゃってるじゃんけ話になっちゃって叩く実というわけで渡辺さんどうやって頑張ってこういう会社は検証しないと使えないと言うか」
11_wtnabe.txt :  4017.9 : 「あーなるほどここに来たんですねそうですね会費何個か話があるんですけど2 activerecord を継承しないとモデルが作れないのがアンチパターンだっていう風に言ってると思うんですけどこれ rails 他の全て全てが ACTIVE RECORD パターンで表現される場合はアンチパターンですよって書いてありますねアンチパターンになってしまうのは M」
11_yu_kgr.txt :  4020.6 : 「07」
11_wtnabe.txt :  4077.9 : 「アプリケーションのすべてのモデルクラスが activerecord の基底クラスを継承するという規約ですって書いてあるんですけど rails の規約に model activerecord を継承しなければいけないって別にないんでじゃあ違うじゃんっていう気持ちは割と強くあったりします activerecord 継承しないモデル作ってそこでロジック書いてその中で activerecord 呼べばいいじゃんでも同じこと言うんですけどね本で書いてあるのとパズドラにすればいいじゃんっていう話なんですけどそこがね案外みんな忘れちゃってると言うか消さないすよ頭だがそのクラッドが公開さ」
11_katoh.txt :  4077.9 : 「うんうん出ないねあーなるほどね現実それしたら実際のテーブルクロス消すわけじゃないしたらそれっぽくなっちゃったでしょ」
11_wtnabe.txt :  4137.9 : 「ホテルのおっしゃる通りそこは紳士協定になりますよなんだけどその最初から設計が全部出来てるわけじゃないんでまぁそこは折衷案で行ったらいいんじゃないっていうのは結構強く思ったりはしますけどねていうのとくらっとが公開されていたら必ずドメインモデル貧血症になるって書かれてるのは非常に引っかかっててよそんなことねーよってそんなことねーよってのあの強く痛いいやこれは僕がどうやって避けてるかっていうとそもそもモデルがコントローラーの事情知っていてはいけないっていうのはわりと最初に言うから言われてるので」
11_yu_kgr.txt :  4137.9 : 「紳士協定」
11_katoh.txt :  4137.9 : 「Java ユーザーが激ギレするところとねそうすけどさっき言った通り紳士協定結ばできないですか」
11_katoh.txt :  4197.9 : 「うんうんうんうんうん今実は渡辺さんがログアウトしてないのにしてた話はクリエイターの話で24点5.1青菁社モデル折り返す」
11_wtnabe.txt :  4197.9 : 「コントローラの事情は全く考えずにモデルで完結させるべきっていうのはあの rails やり始めたときに一番最初にはそうなんだって思って頑張ろうと思ったところだっていうのとボブ tdd でやるので基本的には全部立った時にコントローラーに書くとアホほどテストしにくいのはわかってるので書きにくいってことは間違ってるんだなと思ってそこでやめますコントローラーに書くとあこれはあかんなってもすぐ分かるんでそこで引き返すそれが一番多いですねなんでとにかくモデルに全部ツッコミってやるよ」
11_katoh.txt :  4257.8 : 「クリエイター話でまあとにかく今は田部さんがおっしゃったようにモデルに全部持たせる親っていうことでモデルを頑張って外部に公開されないような内部実装の詳細にするという風なやっぱやるんだけどミラクルぐっとでいました昨日はたとえばユーザーのお財布が別でチンして持ってきたり撮ってアバターも出たです西武鳴門でパフォーマンスチューニングする時にはそれもあらかじめ JOIN したデータは内部で持っているとやりたいけどそれとあの僕が用意するメソッドは use . List with お財布水アバターって謎のメソッドが増えてかつどんどんどんどん増えてくジャンスカなんとかリスト4なんとかびゅーとかなちゃん」
11_katoh.txt :  4317.8 : 「すぐ俺んち来ててうんと思うんですけど渡辺さんもそういうメソッドネハヤスの好きなのかなと思って忘年会だそうですよね例えばシンプルにリストが欲しいって言ってリストを返すメソッドをちゃんと言うじゃん例えばちゃんとはずだのユーザーを作ったとしても結局パフォーマンスが欲しい時は内部実装ちょっと知ってこないとできないって言うんでまあ内部実装を知らなくてもできそうなメソッドを提供してそれで頑張るとやっちゃうんですけどそれってまぁみんなやってんか」
11_wtnabe.txt :  4317.8 : 「そうですね物によるけど割とやりますよ大検索メソッドみたいなのが欲しい時もあるんでそん時は parameter 受け取って activerecord のリレーションでゴリゴリゴリって組み立てるのやりますねやっぱそうなっちゃうそうですね」
11_wtnabe.txt :  4377.8 : 「それをそのある程度以上複雑になるんだったらその複雑さを受け持つ人を activerecord からひっぺがせっていうのがこの本で言ってることなんだろうなとは思ってますけどねそっちねそうですね」
11_katoh.txt :  4377.8 : 「取れますかふともそうだよねそうそういた方が今回は上位んだったけどまたまた先日画像ルビーで勉強会でやったあるゴリラってところでよく勉強した内容のものを押し付けて返すという場合には添えるの近辺できますか内部的には実は外部サービス費って検索した結果を返しますっていうのもクラッドのリスト直接開くんじゃない限りはグランド Find と言うべきかそれを調整さなくんじゃないからできるでしょっていう話なんだけど結局パフォーマンスチューニングするとなると中身の実装を知ったようなメソッド名になっちゃうなーっていうのが僕の印象」
11_wtnabe.txt :  4437.7 : 「あと何だろう抽象的な複雑なロジックが実現できそうかどうかは動いてるものがないとわかんないみたいなそのニワトリ卵の話は必ずついて回る気がしますけどねそうそうそうそのまあこういう風になってるとこういう風に抽象度上げておけば草津なロジックを書いても大丈夫だよねっていうのは満何歳としてわかるんだけどでもその複雑さって実際に取れるデータがこれとこれとこれとこれでこれはもう動いてるみたいなのがないと実際に動かないその絵に描いた餅なわけじゃないすかやっぱそれを先に作って詳細は後から作るみたいなのが最初から気持ちよくできるかって言うとそこにはむしろ逆に不安があったりするのでどっちもやりたいっていうのが正直なとこなんすよね」
11_katoh.txt :  4437.7 : 「モデルテスト橋ですかママ」
11_yu_kgr.txt :  4497.7 : 「おヒジョン」
11_katoh.txt :  4497.7 : 「明日から作りますかねば結局何もかもあいとまあそんな感じと良ければ Creator 次素結合まあ今更言うことじゃないと思うけど今からこの本 SQL の本だったんであのそうかそ結合ってなっちゃった解説がいる人を見るのがあって思ったって話ですねその次が工業粛清背景ションコヒージョン暖かな愛コヒージョンモデルクラスを TAO から分離すればマジックウェアの桜説明書よりちゃんの姿見ても出来て良いよ女性を得ることができませんって言う」
11_wtnabe.txt :  4497.7 : 「生のデータもんみやっぱ見えて欲しいして抽象度も上げておきたい子っていう療法をやりたくなるんでなんかそこを上手くアクティブ今夏来なくても rails activerecord ぐらいの規約だとまあまあやることないよなーっていう気持ちではいますけどね」
11_katoh.txt :  4557.7 : 「こういうのがヒントにモデルをデータアクセスオブジェクト分離しましょうねって言うてさらに24.5点にドメインモデルの使用をして8パターンを解決しようということでここでてきますエリックエヴァンスのドメイン駆動設計本体ても出てきてドメインモデルと呼ばれる優れた解決策を提唱していますとパインを読むと一部とソフトウェアの偏った意味合いではなく MVC 本来の意味合いにおけるモデルとはオブジェクト指向によって対象ドメインをアプリケーション中に表現することですそれはすなわちアプリケーションのビジネスルールと美尻のためのデータです今真壁さんが破産しちゃったですねえさんにを続けてアプリケーションのビジネスロジックをモデルとは」
11_katoh.txt :  4617.6 : 「アプリケーションのビジネスロジックを実装する場所ですねとベースのやり取りはモデルの内部的な実装の詳細なのですとデータベースの構造ではなくアプリケーションの概念に基づいてモデルを設計しますしてデータベースをモデルクラスに完全に隠蔽したりするようになりましょうというのは僕が最初に入った会社の OCR の結果を押すとはするところとかは完全に来があってた俺データベースなんで神をも書けんかったけどなんか知らんけどめっちゃうまいことをマイクロソフトの Access のデータベースになってた絵が Java ののコードが続いてます受付高菜のコードがトイレでも結合ができましたねコントローラーから行動が入りましたねとコントローラーがどの程度でアクセスが知らなくてもちゃんと動くのに出かけてるねと」
11_katoh.txt :  4677.6 : 「でも出るがデータベースのクエリのカプセル化して伊部で来てねっていうのが分かることはそこに書いてありますとさらに解決策としてプレイのオブジェクトのテスト理想的なのは DB に接続することなくテストできることですと分離できればスターベガモックス気になりますということで先に出ているユーザーのデータがお財布を保存したいっていうの上か叩くだけであって別に何かそれでそれで出ているんだけどていうのがないのが理想的なプレイなオブジェクトがそのまま使えるとか言い出すとさらに現実的に考える案新発田現実的に考えて dao は連絡したオブジェクトはどのようなフレームワークにおいてもたとえそれがマジックビーンズアンチパターンを招いたとしても使えると効果的に使えるとただ渡辺さんのようなエキスパート屋紳士協定がない人が」
11_yu_kgr.txt :  4737.6 : 「宅建基本書」
11_katoh.txt :  4737.6 : 「オブジェクト指向設計原則をよく理解してない会社に任すと匠鳥取コントローラーにごちゃごちゃ書いてあったり泣いたり病院なんだかんだで書いちゃったりしてそれっていうかことになりますよと魔法の豆のつるなのかスパゲッティなのかまあそうなのよはから待って読めないものができちゃうとかねこの本の SQL アンチパターンの説明するアンチパターンはとメモるの基本はデータベースはかかる所ってのはうまく隠蔽してその方が生産性を大いに高められてますよと最後にカッコ書きでモデルはテーブルから分離させましょうと大垣してあるでかい字で何とか行きたいというわけで一時間半」
11_katoh.txt :  4797.6 : 「しゃべりましたじゃあこれでもう変なコントローラーを書かないとお兄さん約束てくれるかなまあそんな感じですかというわけで activerecord なんだなんだつってこうか書いて行くけど一番言いたかったことは今言った通り詳細を隠蔽しない所詮は詳細を隠蔽しろよっていうのと出さなくても良いメソッドを出すからみんなコントローラーに書いちゃうんだよっていうのがアンチパターン直接クラッドできちゃうから書いちゃうんだよてえアンチパターンだけどまあ紳士協定を結べない限り便利に使えるからまあ使ってもいいよっていうのはこの本に書いてあることですとはだいたいこんなところかなぁ喋りましたねどうです」
11_yu_kgr.txt :  4797.6 : 「気をつけたいですね」
11_yu_kgr.txt :  4857.5 : 「紳士協定ここソースねタイプスクリプトとかだとできますねハンマーだとなさそうですねもしかしたらあるのかもしんですけどドナルド」
11_katoh.txt :  4857.5 : 「ちょっと感想を聞いて終わりますかまでできることはやるからね基本的にはねできることをやってこうドレミで弾くっていうのはさもうお互い」
11_wtnabe.txt :  4857.5 : 「まあ飲んでんの LL の世界ではね JavaScript も今はできるんだっけプライベートできましたっけどんなものオブジェクトだとなんか別に何もできないんでまあお約束がこれは基本使わないよねっていうのが浸透してればまあその部分に置いとけばとやらんよねっていう気持ちはあるけど気持ちだけでは伝わらないよねっていう生もちろんありますね」
11_katoh.txt :  4917.5 : 「そう心が病んじゃうからさお前直接呼ぶんじゃねーよだって呼べるしてみたいなっちゃうからそうやったらちゃんとコードの方でプライベートでしておくとか隠蔽しとくとかしてその人がやろうとしてもやこれ直接叩かないでこっち使ってくださいというぐらいで済むしお互い悩まなくて済むからいいなと思いますよだからね出来ることはできるからできないようにするっていうと基本何で愛というわけで effective Ruby 番外編最終回となりますがどうですが満足したもう車出ましたでしょ今の空白を表現するのめちゃくちゃ難しいなんか Facebook 上でトムさんに FB を完走した」
11_yu_kgr.txt :  4917.5 : 「ソープ」
11_wtnabe.txt :  4959.2 : 「8°誰々が僕が僕が effective Ruby を聞いてた体でしたっけ」
11_katoh.txt :  4977.5 : 「完全に走りきった乾燥乾燥の乾燥で1時間延長戦させられるわけですかなら僕もいいと思いますかほどねまた決めて頭にできることはできちゃうっていう問題がどうしても音が聞きますよね花見花見フレームワーク」
11_wtnabe.txt :  4977.5 : 「あーはいはいわかったすね受かり activerecord なって言ってみるもんじゃないなっていう気持ちもありママ activerecord いいと思いますよなんだろう世界が変わったものなんでそのインパクトが強すぎて持ち上げすぎてる部分ももちろんあるとは思いますけどねまあ今となっちゃん寝ない世界もちゃんと一緒に行ってみるってのありなのかもしれないしなんか今だと花見とか花見は activerecord じゃない今リポジトリパターンになるんですけどそんなもん本当はもうちょっとやってみたほうがいいかもなぁみたいな気持ちはありますよね」
11_yu_kgr.txt :  4977.5 : 「花見」
11_yu_kgr.txt :  5037.4 : 「トムハンクスね」
11_wtnabe.txt :  5037.4 : 「まただその今回のアンチパターンのやつもね activerecord じゃないドメインモデルを大分かるけどどういう名前でどこに置くべきみたいなのってさっぱりわかんないですよねそうそうそうその部分のヒントはじゃあどこに探しに行けばいいのかって言うとましょうも紹介されてるけどねっていう」
11_katoh.txt :  5037.4 : 「調査書長所ね立フレームワークが提供してる外の外と言うかやろうと思えばできるけどそれは一旦考えない系ですかねうちはそれ考えなくてこういう体ですかっていう rails やっててまず SQL アンチパターンに行くってだいぶあれじゃないですかなんでかって言うと俺もうだいぶ直接 SQL を書いたら負けだと思ってるんですよアクティブ雑用はデータベース or マッパーじゃないけどね」
11_katoh.txt :  5097.4 : 「データベースを隠蔽してくれるものがあるんだったらそのメソッド絶対叩くべきであって SQL を直書きしたら負けだと思ってきてます多分こう思ってる人って結構いると思うよそういう人が SQL アンチパターンを買うかって話します SQL アンチパターンを買う所まで行ったらここに紹介されるパターンとかリリの本とかに行きつけるんでしょうけどなかなか難しいです」
11_wtnabe.txt :  5097.4 : 「なるほどねそうですねまあ ACTIVE record か否かにかかわらずよく聞くのはってか自分もよく思うのは画面から入っちゃうとおかしなお菓子な構造のデータ作ってお菓子なロジックをこねくり回してみたいなことは前よくある気はしますその後のテーブルのレコードが何か言って」
11_yu_kgr.txt :  5097.4 : 「分かる止まりそうですね」
11_wtnabe.txt :  5157.4 : 「この画面になってるかのような勘違いをしてで項目名が20個あったらに20カラムが増えるみたいな葉みたいなの平気で作ったりするので」
11_katoh.txt :  5157.4 : 「さきくろねもねもね設計できないんだったらしょうがねそっから入ると根曲がりですからね僕が今自分でよわいなと思ってるのは逆に出たから入っちゃうんですよお客さんがこんな画面があってこんな画面があってパンパンパンと3回戦したらこういう風にやりたいんですぐらいにしかお客さんの要望は決まってないのになんかでそのお客さんに見せるべきはそのために作ってあこんな感じですかそうですよねっていう所をまず見せなきゃいけないのになんかやっぱねまず正規化とかえでもこれだと矛盾があるようなっていうデータをしっかりしてからロジックデザイン」
11_katoh.txt :  5217.3 : 「ロジックも先に帰っちゃってから View に入っちゃうんで何かお客さんになかなかファーストバージョン見せてが遅いっていうのは自分の中で弱いなと思って床ねだから画面スタートっていうのもありなんかなと思ったこともなきにしもあらずですもっと言うと何だっけよく聞くのが rds が遅いって何が遅いかった設計が遅いって色々スキーマ決めなきゃいけないしそれをそれがやだって言うのも聞いたことが可能 SQL で適当にチョイスを保存をして読むだけでまだやるって言うのも聞いたことありますけどそうですよと言っても限りなく画面近い実とは寿命とかの問題ですよねすぐ捨てるんだったらいいけどこれをバージョン1にしてバージョン2バージョン3と5年ぐらいかけてあげて食ってんちょっとねまた別な子ですかね」
11_wtnabe.txt :  5217.3 : 「firebase できなそうですねそれが目的ならまずそれはそれでアリな気はしますけどね」
11_wtnabe.txt :  5277.3 : 「妄想だし例えばアクセスで済むものなんだけどアクセスを自分らで買ってなんやらかんやらするなよくわからんし丸投げしたいみたいな時にはまあそういうので答えるってのもありかもしれないですよねそうそうそうあれはあれで辛いっすけどまあそうですねそうストマプランニングの話になりますよね例えばメイトじゃあトータルでデータ何番気になるんですかみたいな」
11_katoh.txt :  5277.3 : 「均等なんじゃないかって言うとはそんなデータの政治家なんてどうでもいいからまずは便利なツール使いたいっていうモチベはまあわからなくはないなって薄くの思いますけどねそうな喋ればそれ聞いちゃってる時点でアレなんでしょあの何を考えてこうしてきてるのはだいぶわかっちゃう感じはありますけどものとこかばい」
11_wtnabe.txt :  5337.3 : 「まんまですからね」
11_katoh.txt :  5337.3 : 「巻き込まれた皆川さんはどうですか良かったですあーなるほどねそうねそうかもねま名前があれだからね activerecord そんまま使いな実装のことを言ってるのかも出れないパターンのことを言ってるのかすら分かりにくいことあるかなと思ってたじゃあもうこれで皆川さん森」
11_yu_kgr.txt :  5337.3 : 「いや勉強になりましたねレール自体そんな冊なかったんで結構 activerecord 自体の認識がなんか rails についてくる or マッパーぐらいで認識しなかったんで話し聞いてる途中でアホデザインパターン高いのはロナウドモデルとあの首レコードを分けるというモデルの中でアクティブレコードを扱うみたいなところで結構あーなるほどという子がいてなかったら入っちゃった」
11_yu_kgr.txt :  5397.3 : 「がんばりサテライトあいちゃば」
11_katoh.txt :  5397.3 : 「リマスターではいでは今日はこのとこですかね次もお陰様で準備も終わったんで次はですねあの effective Java 備えてるって言うともう一つは予定入れました今やっと届いたとこです本が出なとあと clean architecture やってくれって言われてねお父さんやりたいやりたいやりたくないと邪魔頼んでないと用意しなきゃいけないというわけでちょっと分かりになってきた相槌を打ってくれる人僕ともしかしたら渡辺さんもいるんだ」
11_wtnabe.txt :  5397.3 : 「愛と思わの予定は入ったんですかと礼拝やりたいかどうかって言うか僕クリアきたよんよんでますけど」
11_katoh.txt :  5457.2 : 「で相槌を打ってくれる人を募集してますんで是非ご連絡くださいはいじゃあ今日はこのところでハイ一時間半以上もどうもありがとうございましたじゃあまた来てください疲れ様です」
11_yu_kgr.txt :  5457.2 : 「はいありがとうございました K 様です」
11_wtnabe.txt :  5457.2 : 「はいありがとうございます私もです」
