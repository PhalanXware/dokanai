transcript 0: 第3回積んどかないラジオ止めたいと思いますよろしくおねしますよろしくお願いします9月6日2019年6月6日22時11分このポッドキャストはアンチ積読で本を読んでその内容をゲストに説明するということキャストですね自己紹介については第1回をご参照ください年間反省前に来てくれました第2回は聞いてます聞いてますやっぱりあの2人ぐらいいれました入りましたね喉の調子がやはり今ひとつという前回よりは肺に入れたくて DTM やってる友人に聞いたらいろんなフリーサイト紹介してもらって出回ったんですけど
transcript 0: なんか俺の小瓶とこんなと思ってピンと来んなと思っておりましたんすけど Windows の起動音とかで起動っていうシリーズがあるんですよああなるほどなるほどとかで公式な他のシリーズを見ていくとこれが始まると言ったらコレだよなーって俺がピンと来るものがあったんでジャンル起動遅いですちょっと探すときにはぜひそのキーワードで転職は先週のやつなんすけど一旦編集がミスってまず最初にステレオをモノラルに変換するんですけど作業するときには等倍で聞いてると遅いから倍速できたんですよで倍速で聞いてるのはエクスポートしたらなんと倍速のままエクスポートされちゃって今日は倍速再生モードじゃなくて本当に倍速のままキャプってしまってアナログな感じしますね練習してたら気づいたら倍速
transcript 0: 結局倍速取りやめてまた一から編集しなおしたんだけどもう疲れてやりたくなかったから初めてをカットするプラグインを使ったんですが自動でも自動でやってみてどの部分をパパを切ってそのまま勝手つなげたんですしたらめっちゃ早口で喋ってるんですよゆっくりしゃべって言うのが単語と単語の間に無音を入れることが俺のゆっくり喋ってるんであってこう発言がゆっくりなわけじゃないし良くないなそういうのよくないねっていう話ですねそれは反省として今日は本当にゆっくり喋ろうかなもうだいぶ早く認めてるけど私はそういえばなんかゆったりしてる感じはしましたよ反省金1分ぐらいしかもたないんだよね頑張ってやります
transcript 0: 僕の声が割れまくってる問題はマックの設定じゃなくてスカイプさんが何かそういう設定あるんだよね今日はちょっと言って書いてみましたスカイプに録音機能たってそれを有効にしてやると30日間ダウンロードできる音声通話記録残ってこれ今回収録1時間とかでいつも喋ってるけどそれもダウンロードできるのかちょっと試してみたけどそれは最悪バックアップに使えないと思うしそれをストリーム配信できるといいなとも思ってるんですけどママこれはまた今度やるって言うことで開いもっと大事な話をしてました何とで何ていう本を読んでる方の本編に言わないって言っ回目で言って油断しちゃっている
transcript 0: はいそういうわけで今日はちゃんと答えていますね SFC ヴェルディあなたの料理をより輝かせる48の特別な方法という本をやってます今日はそれの項目7以降をやっていきますのでちょっと準備不足かもしれないなというのは本当は土曜日ぐらいにゆっくりしてもらって今日は収録することになって項目なるべく読みすぎですよねちょっとおっきいやつね手間取ってるんでまあまあ今日はできるだけ進めてもしかしたらいつもの道があるかもしれない予定で行きたいと思いますが早速行きましょう項目ならスーパーの振る舞いが一通りでないことに注意しようともここで書いてあるのはスーパーってのはメソッドじゃなくてキーワードですがというのがミソで
transcript 0: スーパーバリュースーパーは本当あるクラスを継承して作るで同じ関数名を作るとそのメソッドはオーバーライドできるとそのオーバーライドされたメソッドの中で親クラスの同名の関数呼びたいなと思ったらスーパー高くと呼べるんですよというのがスーパーっていうキーワードの機能なんですけどもまぁそれを活用する話で校スーパースーパーってやってると親関数の同名の親と自分の関数のようなメソッド化メソッドと言うべきかメソッドな気がするんだけど本当はスーパーっていうのは疑問ですよとその証拠に単にスーパーはくとオーバーライドしてるメソッド空に親クラスの同名のメソッドに引数をもブロックも含めて渡して呼び出すことができるのでいいよとさらにとかまず前提として
transcript 0: オーバーロード金井多重定義がないんで引数が2個だろうが3個だろうが45だろうが15だろうが05だろうが同じメソッドが呼ばれるっていう手でスーパー括弧片括弧閉じると格闘ですなしのスーパーを呼ぶことができるとスーパーかっこ何も書かないとやっちゃうとさっき説明した通りで引数渡しちゃうね引数なしで親メソッド呼びたいなって時はスーパーとかすれば価格数字の書きましょうというさらにこの本らしいなっていうことが書いてあるのが METHOD Missing オーバーライド一緒に送っていうのがやり込んでくるとを使いたくなるテクなんですけれども書いちゃうとスーパーって書いた時に親にそのメソッド内お祓いでもしてないっていうエラーが出るはずがちょっと見せて
transcript 0: やめたほうがいいんじゃないって言う事はどこですかね使えますかどうですかそうですねあんまり使わないこの個人的にはわりと使わないかと思ったんですけどでもデータの項目8の説明してからの方がいいかな項目8を聞けばもしかしたらスーパーを使う具体的な事例ではほぼ勝ちなんでちょっとはしゃぎ過ぎましたキスいますね僕8サブクラスを初期化するにはスーパーを呼び出そうなんぞって言うと誰に継承したら継承してイニシャライズってどこにある責任者ライズっていうの言語コンストラクタ化コンストラクタ書くときにはスーパーで書いた方がいろいろといいよっていう話があるようで
transcript 0: スタートしますけど Ruby のクラスは伝統的な OB スタイルのコンストラクター持っていないばあばが言ったコンストラクターその他の言語でのコンサートはここでは持ってないことを説明しますとオブジェクトの初期状態を制御したい場合にはイニシャライズっていう名前のメソッドを書いてそこに必要な人書いてくださいと伝統的な大美祭のコンストラクタ OP されて伝統的なんですか G プラドが邪魔とかなのかな例えば PHP だとアンダースコアアンダースコアコンストラクトコンストラクターコンストラクターですよっていう体の名前ですよねそもそも
transcript 0: 帰ったとこですねもうちょっと他の奴読みますね笑うっていうのはルビーの普通のプライベートメソッドなので自動的に親クラスに遡っていって支払い済みショート呼んでくれたりはしてくれませんよというのが書いてあってこれは確かに手ブラとか Java とかアップとかややこしいなってなるのはだいたいこの順序ですょオブジェクト初期化する順序でなんかこういう歌を作ったときにどの順序からインターライズコンストラクターが走るんだよっていうのを知ってないと大体こうハマるプログラムを書いちゃうもしくはそういう勉強をしなくても不勉強でも使えるようになんとかするというのが来てくださるんですけどもルビーは単にイニシャライズお呼びますよとオブジェクト
transcript 0: ニュース開いた時にイニシャライズを見ますよってだけ決まっててそのイニシャライズメソッドっていうのはブックして入試た時に呼びますよってことが決まってるだけであってその関数のネストとかそのメソッドの振る舞い自体は別に他のメソッドと変わらないというので親クラスを初期化したかったらちゃんとスーパーと書けよと最後に最初で最後でもいいかいますが動作しないかにすれば酒よねそれというブックとかクローンというコイン車ライズ以外の初期化を行うメソッド
transcript 0: それはイニシャライザーアンスココピーっていうメソッドが呼ばれるのでこれもオーバーライドするときはイニシャライザー息子コピーの中に最後はスーパーって書いとかないと変な事なっちゃうよ書いてある本とそうで僕が最初にはまったのはこれ知らなかったんでレイルズのモデルたちを与えたい時に書くとスーパーのインターネットバレないんで書いちゃうとそうですねなんでこんなことになるんやっていうのはめっちゃハマりました動画9でいいんじゃライザーってメソッド作りましてイニシャライザーっていうメソッドとか Set default あーなるほど
transcript 0: あと. NEW じゃなくてドットデフォルトっていうクラスメソッド作ってそいつ経由で印刷を作るというした後初期値をセットしてそのインスタンスを返すっていうメソッド作ったりしちゃいました
transcript 0: あなたもスーパーで書くだけで炎症は防げたなと思いますけどねそうですねか初期値だけであればなんかコールバックとかでも作れそうな気はしますがロードされるとかあの辺フックして長きにわたりだったか聞かれるかもやろうかなとそういうスタイルなのかなとも思ったんですけれども結局何が足りなかったかっていうとこのイニシャライザーイニシャライズイニシャライズメソッドの挙動が理解できなかったいっていうのはイニシャライズは基底クラスじゃないと呼ぶんじゃないよっというのがわかんなかったそうですね
transcript 0: なんかあんまり最近昔は使ってた気がするしますけど最近あんまり化粧をしたサブクラスでイニシャライズの中身書き換えたいみたいなことがあんまりないんですよねなんでだろうな理由があったとかなんか自分で考えた自分でしか考えてないやその他誰かなんかのフレームワークに乗っかってないようなコードを書いていた時にはなんかちょこちょこあった気がするんですけどあんまりけいしょうそのものを使わなくなったのかなんなのか確かに冷えるインクルードするジャンスカアイモジュールって多分デフイニシャルかけますよね自分のかなたぶん確定ドリンク疲れたかけますよね多分そんなのエラーと言われたんですよねきっとその結果どうなっちゃうかっていうと最後にインポートしたモジュール何車列が来ちゃったんですよね
transcript 0: となりますね本当の空のめちゃくちゃ過ぎて辛いからやっぱエクステンドよりもミックス員が良かろうっていう話になってかつミックスインをするとなると腹痛があると変になっちゃうから取り合って変になっちゃうからそれはやめようっていうことでなんかみんなそういうはまりを避けた結果そうなっちゃったんですがあんまり喜んで継承を使わない風潮になってきてませんなんとなくミックスにする薬もしないと間があくとし君のうれしさの特徴みたいな時期が昔になかったでしたっけ
transcript 0: 例えば継承すべきかいじょうすべきかとかその辺も用はオブジェクト指向を覚えて警鐘を覚えたら何でも軽症でやってしまわないといけないんじゃないかって気持ちにはなったっていうのは分かりますけどねなんかそれの時期を過ぎても別に気にしてるけどイニシャライズ書き換えたいとか思わないしいいとか現象がありがたくてでもそのオーバーライドしてスーパー読まなきゃみたいなのとかをあんまり考える機会が最近ないなっていう気はしますねちゃうからねそれは歩きますしますはい避ける結果っていうのもあるし何でもかんでも形状じゃないっていうのの両方がある消しますねこの辺の初期化する順序とか個の言語が
transcript 0: 振る舞うのかっていうのってわりと腕前にすぐに左右されてる感があるんすよねた後せっかく誰でも使えるライブラリを作りたいのに出ないと相当してないと使えない初期化手順とかになっちゃうとなんかイマイチなんで使いやすい奴ほどそういうのされてるのかなっていう気持ちにはなりますよねだから Ruby 勉強し始めた時に思ったのはメンバ変数とか Ruby メンバ変数言葉ないんかなという変数化オブジェクト変数とか内部的に持つ店主& K 様ご説明したようにもなんちゃって用語で喋っちゃってるって言うのが点数の件後であの言葉とか知りプラで優子の言葉で使うのは本当やめたほうがいいと思うその言語のその後はそれを表現するために使ってるんだからだけどまぁちょっと便利に使わせてもらうと
transcript 0: 変数の初期化あれ何だっけスーパーを呼ぶか呼ばないかとそうなんすよそうなんですけど変数の初期化問題は本当に誰でもいいからとかだと今日はちゃんと0とか大入試ではなんですかれないですよねあーそうかそういうことか与えないとなんでなんかピンときたとそれですねあの初期化しなくていいからルビーそれもありますねあそうなんですよこの辺が lightweight language 抱いたしなくていいですかどこがいいなと思ってました何を話したかを極度の変数の初期化される順番とかどの辺っていうのがルールを覚えようとしたときすっごい気になっててなんで樹になるのかって言うと
transcript 0: それを知らないとかの言語に入門できないと思ったまず Java とかシープラとか新社屋って微妙に順序違うんですよまずあのメンバ変数初期化されて子猫を添えてきて暮らす残りの公演もあれてって言ってんじゃん決まってんですけどそれをちゃんと知らないと Ruby 入門できないなって思いながらやってた気がしますそれだけでいろんな言語覚えたいときはこの辺をねちょっと見つけて覚えておいてもらいたいな違いに着目してプログラムを書くことが大大大魚と思いますこんなところで第八小項目8項目8項目の後にちょっとこれならスーパー使うだろうっていう話ですけど今の議論からするとやっぱりスーパーを使ってあれこれするっていうのはなんか今時じゃないや
transcript 0: イニシャライザコンストラクタを取っちゃだめだね日に日にチャラい頭を使ってあれこれするっていうのがそもそも今流行ってないかななかなかスーパー使わないんじゃねっていう話ですねもうを使うとしたら本当にスーパーだけ書く丸投げするやつを書かなきゃいいだけじゃないなんか例えばエクステンドステラなんか一行2行達成者と丸投げよろしくねみたいなぐらいかなはなんかあんまり考えてやりたくないというかそこでいじっちゃってるって事はもうなんかそのちゃんと置換原則に従ってないんじゃないかみたいな何のために継承するか分かんないもんねそれしかいませんが一致して一致してますこれみたいな気持ちになっちゃうんでも現行の半分終わりましたですか
transcript 0: 相次ぎ9ルビーの最悪に紛らわしい構文に注意しよう大役に紛らわしいとはそれでセッターメソッドは明示的にレシーバーを指定しないと呼び出せないばこれのことですねあまりセリフドットとか書かなきゃいけないシーンがあるって言うんですね分かりますかねなるほど例えばアトリビュートアクセスされ格闘他の言語ではこの件後でもほどほど中に持ってったって書いてあるので setter METHOD Get メソッドって書けるんですけれどもロビーの場合は服部 attr そして attr accessor とかリーダーと書くとプロパティを定義できるなかなか無くても栓が抜けた感じに転移されたみたいなとこなんですけどもルビーの場合セッターメソッドっていうのは
transcript 0: 変数名=するとその辺セッターメソッドが描けるんですけども自分自身でクラスを定義しててその自分自身で例えばアトリビュート Access The Name っていうのがあったとしてそのネームに値を代入したいな値をセットしたいなと思ったら name =なんとかとても眠いゴールかと思って書くとそれはそのローカル変数に火通っての話題にされちゃうんで明日変数クラスの変数に代入したかったら Self . name =加藤と書かなきゃいけないっていうのがこの翻訳解約に紛らわしいとネットはそれほどルリ第1回の時にはてなのメソッド名はてなの話とか
transcript 0: メソッド名びっくりだと例えば例外を投げることがあるとか破壊的なメソッドであるって言うのは暗黙的に別に誰か約束したんですよね暗黙的に想定俊介缶詰の最後に記号が使えるって言うのは結構珍しい来て書いてて結構気持ちいいですねはてなって書くと確かにいる文法になって感じだしビックリ企画とレスキューキャッチ他の言語で使ってても例外を捕まえなきゃいけないのかなっていう気持ちになるんで割と読みやすいし分かりやすい感じなと思いますがここでは最後=って書くとこういった現象が起こるというこのサンプルでは今言った通りカウンターっていう属性を作ってローカルセルフの弟監察課数にカウントはイコールゼロて書いちゃうとそのローカル変数がゼロになっちゃうだけだよねこれもくれーるずで
transcript 0: カラムの値を設定したじゃないですか価格には対応可アクティブモデルで上手いことアクティブ茶 activerecord activerecord のモデルでなんか値を設定したいというときに初めてこれはハマりましたねなんか完全に無意識に使ってましたね僕が本当にはまってもわかんなかったんですけどロボコップが教えてくれて助かりましたロボコップがお前んと変数ここで宣言したけどこれ使ってないよと言われてエアロボコップ様お店使ってないんじゃないんだよこれはローカルの変数に代入してるんだよたろうかじゃなかったんですね自分が所属するオブジェクト変数セットするんだよと思って実行するとか設定されてないんだけどとなってそれでセリフドットってかけてことねと言うとね
transcript 0: セルフ使うとも理解する前までは強くても全部せるぶつけたこともありました台詞セリフですよこれもまだロボコップさんがお前セリフつきすぎじゃねこれがねこれがねこれがねててくれて理解が進みましたがなるほどなのでこの本を開くセルフで行動を汚さないようにしましょうかたくさんつけんなんだってあるほどななるほどななるほどは人の気持ちがわかったそうですねなんだろうレールズ書いてる時はネイルのサンプルをご一緒懸命見ながら書いてたので何か自然とそうなっていた気がしますね普通の人だとあんまりこの書き方しないですよねてかボカシないんですねとするとアクセス里解除
transcript 0: 特にセッターメソッドつかないねもうそうだしその何かの変更したいんで変更のメソッドに引っ掛けて何かやりたいみたいな時はもっと普通のメソッドっぽいのを作るした代入したいだけなんだったら8@から変数名を書いてそのまま代入しちゃうそれは良くない高度化=かっていうサンプルの一つにくらすレクト長方形というクラスがあると X と Y 幅と高さと言うべきか幅と高さがあって面積を返すメソッドがあると面積を内側に変数で持ってて幅と高さが設定されるたびに内部的にその値を計算して持ってくるわけですよね
transcript 0: セット幅とかセット高さって時にフックして動かしたいという時にはこういうのセルフを使わないと実現実現できませんよとかはと思うけどアリだと思います北大分なしだと思うけどそうですね今何でしたっけリアクティブでありますよねそのレースとかであれみたいな事を実際にやりたいってなると
transcript 0: またもそんな感じにはなる一番単純に行っちゃうとそうなる感じはしますねステキなやり方だと多分 X と Y の変更を見張ってててそれをフックしては書き書いてありなんですけどですねそれはセッターゲッター見てるって感じか例えばよくなかった僕が言いたかったのはとある変数を変えたつもりが他の変数の中身も変わるっていうのはアリかナシかって話それでもサザエさんがおっしゃったように例えばセット幅ビックリマークって書いてあってそこに幅を私たらなんか勝手になんとかも変わったってなったらまあまあメソッド名的にそういうこともあるような名前だからそんなもんかなと思うけど OBJECT .幅=30て書いた時に何か他の奴だったが変わってなるとイヤイヤイヤイヤっていう気持ちになるなと
transcript 0: そうですねまあでもそうだなでも確かに activerecord 帰ってるとかそんなのあったりしますね特に姉ビフォー遊ぶとかバリデーションとかが取ってありますよね半角を全角に置き換えたいとか電話番号のハイフンはストリップしちゃうとかその辺は撤退セリフ. PHONE number = SELECT 4ナンバーの海軍落とすとかそんなんですかねまあそれ言っちゃうと activerecord 自体がアンチパターンでしょって言われると思いますねって言う言うしかありませんコードアンチパターンナスカ SQL アンチパターンではアンチパターンと言われてませんね迷惑にねつまるところ activerecord 買ったんですか activerecord パターンっていうパターンがアンチパターン
transcript 0: それは保存する時とかにフックして名前変える変えさせるのはよくないですかと言うかデータベースをマッピングするやり方としてこないデータベースレイヤーで制御しようって事それともアプリケーションレイヤで制御しろってことなんとね余計な事言ったかなだいぶあのー記憶が薄れてるところもあるんですけど持って行きましょうかね今から袋原 SQL アンチパターンで買えません家もありますよくありますけど何かあれですよねとエンタープライズアプリケーションアーキテクチャパターン activerecord 紹介されてるけど QL 的には SQL アンチパターンの本の中ではあれはもう明確に8パターンですよねっていうような
transcript 0: 僕自身はレイルルビーナ activerecord 明日の activerecord パターンとはちょっと違うかなっていう気はしてるんですけど呼び名の問題ってことねでこう取ってったってその activerecord ないとことだそうですけど実際その activerecord の真似をして他の言語で行ってみると意外とちょっと面白いなやらないほうがいいんじゃないみたいななったりするのでリフォームとか validate で値を変えちゃうっていうのはよくないと僕は思いますねば自分のセットした覚えがない値が保存されてしかも deserialize データベースから読み込んだら普通にさっきセットした値と違う答えが返ってきたっていうのはなんかそれはよくないんじゃないかもありますねだからなんかその辺をバラしてた方がいいんだろうねーって言うの
transcript 0: 考えてはいますねいつもねその後のバッグに詰め込んじゃうとコールバックの中でコンディションも見てみたいなことやるんじゃないですかこの辺りビュートを書き換えるためにこっちのアトリビュートを見てみたいな処理がいっぱいになっちゃって何がなんだかよくわかんないみたいなことはやっぱりあるんであれば会員情報が石川県人だったらこっちとか福井県人だったらこっちとかその石川県人だったら福井市に住んでることは絶対にないんでバリデーションエラーにするとか売ってありますもんねそれがデータの中だけ見てればいい場合はいいんですけどこっちの画面の時はこの制御にしたくてこっちの画面の時計この制御にしたいみたいなのが出てくると本当にこんな子も出るって何だっけみたいなのも出てきちゃうのでその頃バッグが便利すぎて何でもできちゃうからそこはよくないかなって言う
transcript 0: データベースに保存するデータは確率的にしたいんだけど使う場面は画一的ではないから結構つありますよねそれをやらかす奴がお客さんに全角半角を押し付ける UI ができちゃう問題とかと同じですよねきっとなるほどはいはい保存する時はこういう風にしたいそのこういう風にしたいをお客さんにも求めちゃうってそれをお客さまで読者内容一旦加工してうまいことやるだけのはずなのにその好例だとはこうでなければならないっていうのお客さんに押し付けてしまうというのは確かにダサいなーって事思いながらそのモデル結局あんまりそれを真面目にやるときとデータベースにアクセスする人はも薄いラッパーになってその処理全体を表すクラスが一個ずつ出来て行くっていう事に
transcript 0: だろうなっていう動画見る用の冬用のモデルとか謎の X の継承クラスを作ってあれこれする事だそれは何なんでしょうね間違いなくの思うとまあこういう興奮がなくても全然いけるよねっていう台詞にアクセスしてる時点でだいぶ弱くねえかってことですね
transcript 0: 分かりました何とかねきゅうのまとめとしてはとにかく Self .ってつかなきゃいけねぇんだよってところがあるよっていうことだったんですねバイバイ思い出したもう一個話さなきゃいけないなと思っている自身を表すものルビーだったらセルフない玉だったらいくらでもある VB でも見に行ったんですけど最近 ID が賢いですかはいそうするとしかもちゃんと片付けの言語だとちゃんと方を見てうまく補完してくれるからですを取って書くとちゃんとリスの持ってる味噌でしたが出てくるんですよ結果どうなるかって言うと皆 this .って書き始めるっていう対するタッチするとメソッド方が効くようになるんですよねなんで俺すぐ8日ですかめっちゃ入ってました
transcript 0: Ruby だろうがなんだろうが同じように教えてもらえるかなと予想し特にメソッド名が糞長くなってくるんですか頑張って作ってるとは言えなくなるよそれ他のしたいんでリストこれこれこれで打って変わって選んで倒すというのをやってました何故ですかめっちゃ多くなってそういうすると稀に変更に曰くなんですよねリスじゃなくなった時どうすんだっていう話なんだよ
transcript 0: あとセルフじゃなくなったるみもそうでそのセリフの釣れると支えてるんだけどこれで先生にとっていなくなったじゃんスケ創価学会になっちゃうんでやっぱ Self .て余計な台詞だからなんでこうリスト化ミート価格と保管も効くからますます方とか方情報が頭には欲しい子このメソッドは誰の持ち主なんだってのすごい意識してオブジェクトメソッドの持ち主かレシーバーとそれが使えるメソッドなので気を使ってたっていう曲がありますねなんで痩せれるとかリスとかいちいち余計なの所にも書いちゃう問題っていうのは僕が作りますこれはあれな感じしますねオブジェクトがでかいんじゃないかっていう気はしますねだいたいそう大体そうだけど
transcript 0: 大体そうなんだけど ID が便利すぎてリファクタリング coide でお願いするから例えばメソッド名が長いとか変数名が長くてもそれはむしろ素敵なことであると ID が保管してくれるからていうやつもいると思いますけどねまあそうですね保管しやすいのは正義になるんだったらそうですねなんとなく頭を使うってどう読むと新しいクラスを作るまでもない構造化データは走れなくしたらことを使い場所ここに載ってるサンプル画像とある日っていうのクラスにしててそこには最高気温と最低気温と日付があるという構造なんですけれども11クラス
transcript 0: ハンニバルウェザーを作るんじゃなくてストラクトでええやんなっちゃうのにごめんなさいねちょっと違うけどまあいいたいことはその話で終わる人最高気温最低気温ぐらいはもう走っストラクトでええやんっていう話ですね利点としては箸だったらオブジェクトこんなにカッコイイですかかぎかっこーかっこーかっこーかっこって言ったらしませんかと各国弱と角括弧聞いたことを知るにあると値の読めるんだけどそれの日など存在しないキーを設定したら指定して読むと真似るは帰っちゃうとそうなると居るだった場合はこれとかあれって書かなきゃいけないんだけれどもちゃんとそんなのありませんそういうメソッドプロパティありません
transcript 0: 例外が起こってテストでも見つけやすいしミスを減らしていいですよという話ですねアッシュ万能説みんな話とか好きですよねそうですねこれ早い書き出していただいたの読んで思ったんですけどトラック当日は雨降っ便利じゃなかったんですよねその心は2.5からストラクトに与える浅井大キーワード引数に与えることができるんですけどその前ってそうじゃないですよねキーワード引数って何
transcript 0: まあ二つあってストラク投入したらクラスができてクラスを NEW するじゃないかなんかに蟹カニ並んでキモいっていうのと入試たクラスに小さい値をセットする時にストラクトにゅうの時に名前を与えておくでその名前に対応する普通のメソッドの引数みたいに順番を気にして与えるっていう書き方になりませんでしたっけストラクト入試たクラスに入電データを与える初期値を与える普通の引数は単に入れスっぽい例え話順番待ちだったけど今はネームコロン名前をです
transcript 0: キーワード引数にできれば名前の順番気にしなくても痛みがわかるからその他の発祥の初期化とかああいう感じで使えるんですけど2.5以降はねその前はあんまり便利じゃないという過去レコードがあんまり読みやすくないというかそんな感じにしません4番に意味があるので何かあまり好きじゃないんですよね僕は寝たことか初期化するときに空気乾燥ストラクトにゅうの時に名前を与えるけどって言うサンプルでは思いっきり純情 CSV をパースして食わせてますねロー番号列番号を返すのインデックスをして食わせてその番号を与えるという似合ってますね
transcript 0: それではストラクトニュー括弧開くシンボルデート頃カンマコロンはいカンマコロンローかっことじるとやってデートハイロード順でデータを初期化して初期化できるようにしますよってよってねて構造このコード代用乳する時にはその順序で渡すという風にやってますねなるほどなぁ俺を利用しなかったら別にオブジェクトのドットでたけのこはちょっとハイドロドットハイ=なんとかドットロー以降のなんとかって書いてけばいいんですよねまあまあまあそれはそれで嫌ですけどね
transcript 0: 長屋ですけど高いからなそれがいまいちやっていうのがみんな知っててみんなわかってたから2.5でそういうキーワード引数で終わらせる気になったんですね思ってましたからそのお礼で上がってるはっしーとか一切使ってる人が多いから使うようになったっていうのは僕はあるんですけどまその発信今のように初期化しやすくなった2.5以降のストラクトだったらもしかしたらいいかもなぁみたいな気持ちにはちょっとなりましたねこれ何が喜ばれて使うんですかあんまりちゃんとって話してたことないっすけどやっぱり未だトレイル喘息とアクティブサポートの機能でメソッドを呼び出し方できますよね髪型とアクティブモデルでも
transcript 0: アクティブサポートの機能で例えば param 図とかちょっと脱線しちゃってますごめんなさい整理できてなかったしねと一個はメソッドのように値を取り出せるオブジェクトから戸塚ハッシュだとその格好で返さないといけないことと同じ話ですよねしますとかだとメソッドのように取り出せるのであのハッシュのように使えてかつそのメソッドのように取り出せるの便利だよねっていうかかっこいいよねみたいな
transcript 0: ベストラクト何が違うんですかドラクエとと違うのはどのさっき言った当初はそういうこと初期値の与え方初期化しているかのようでいてそうかオブジェかっこいいオブジェクトのプロパティアクセスみたいな呼び方ができるって言うと思われたストラップとにできるって言うのは箸だったんだという風に捉えてますねその目的で使ってるんであればおそらくとに置き換えていくっていうのは全然アリな気はするなっていました僕が本当に話嫌いなんですよ嫌い違うならどれが走りがいいじゃないいいじゃないと言うか何て言えばいいかな何かっていうと強く二人でプログラミングしてたんですけどどのメソッド名
transcript 0: オブジェクトの構造が変わったと例えば今までネームだったのがラストネームとファーストネームに変わりました時にオブジェクトに対するそんな神データの持ち方が変わるわけじゃないですかで眠っていうのはもう No METHOD error ラストネームとファーストネームっていう風に置き換えて欲しいのにそれを走れば作っちゃったんだよね嘘で作ってたよね確かなかぎかっこでもアクセスできる人でもアクセスできる子メソッド名が変わった時に脳みそ寺を投げてほしいのに中に入れて動いてるんですよ旦那様は誰かが写真で作るオブジェクトの中身を変えましたその結果眠っていうプロパティはなくなりましたどういう状況なのに走りで作ってるから借り格好で
transcript 0: 霊夢とか価格とセットで着ちゃうよねもう運用としてはラストネームとファーストネームなってるかな結果としてゲットする煮る煮るがかき消すんですよこれプログラム止まるんだけどって言われた時に LINE したいんだこれ何勝手に勝手に飛んだけど名前変えちゃったから他に泊まってそんなメソッドないんだけど無理やりちゃってるだけですよって言いたかったんだけどこれはこれは誰のせいだと思った時に箸こいつのせいは効率が悪いと思ったそれなのにその繊細さをハッシュに求めちゃったわけですが思ったことは端格闘プログラムプログラミングが早いかその時に祖父と造ったハッシュなのかとかクソ楽と7日クラスタのかっていう実装に依存せずに作れるから早いかなと思ったんですけど早く来ないと思ったっていう話と
transcript 0: は真面目に書きましょうと思ったっていうかあのつい昨日今朝は日記を書きまして最新のエントリがあるんですがここで紹介した方がいいですかちょっとなんでなんで名前のブログなんですかあり価値っていうありがちあの後は超インフレ線のバスですねそうですねありがちでありがち. net 空をちょっと大事な検索トップにきますね6月5日昨日ですねいいですね聞いた単語が並んでますがこれの脱出っていうの見つけて
transcript 0: ダッシュっていうのがあって転んだんですねこれでやると気がするんですよそれをその時知ってればねっていうことだね多分まさに求めてる事なんですが亡くなったとかあははやっぱ明確に俺が持つプロパティはこれだよっていうのを書くことによってもうないやつが2つ足りないくなった時にちゃんと助けてくれるとことですねですねこれ凄いじゃないすか阪神好きになってきましたたまたまです僕もね最近踏み抜いたんですよなんでこれに入るなんやろってほんとそうなんだねお前が勝手に変えながら偉はなんやでっていうのを何かやりたいなますでもそれは10歳代無責任ですよねまあそうですねですと書かなきゃいけないの
transcript 0: それだったらコンパイルエラーんしとけよって思うことあるけどな何でもこの程度ならこれはアリだなって思いましたねで話を戻すとこれストラクトでできるんかなーっていうんだったと思いましたねトラクトできるって事ですよねめめのメソッドエラーでコケるのは間違いないんででもリクワイヤードはこの値が設定してないのは許されないってことですねこれは真似できないな事を皆さんに読んでください6月5日の変更よろしくお願いしますたいもっと CM とか例えば僕達金沢 RB っていうイベントに入ってるんですけどとかそういう情報入れてかなきゃいけないですかでも番組の中に唐突に入るんですかねなんか CM 枠みたいなのがあればね一応このアンカーって
transcript 0: アップロードする音マネタイズ用の広告も印刷するってあるんでそれを使ったらそれができるかもしれないですねでも日本語の国が入るんですかね一回広告でやってみたほうがいいな生成りバリバリ日本語中で英語のかっこいい CM が入るんですかねどうなのかよくわかんないですけど今度行ってみたが最近あるですごく YouTube のゲームの動画とか見てるといきなり Circle CI の CM とか初めて辛い気持ちになりますよ笑の CM なんかしょっちゅう見ますねなんでだろう早くしないと体にお招きしなきゃいけないという話題があるからそれもねやんかそれだけいけないままこのラジオね間違えでした渡辺さんと同分け前をするのかって殴り合いの喧嘩をしなきゃいけないですけどでも受かったら考えましょうそうですね
transcript 0: このサンプルトラクターなんですけども連日クラスは Class クラスのインスタンスですって言ったのと同じようにストラップはストラップとクラスのインストラクタークラスのインスタンスのに生えてる. New を使うとその構造体の印刷がオブジェクトが作れますよという構造的な今言った通り日付とかなんとか僕もやったら Twitter っていうツイートって書いてあったのでそのツイートファボついてる花は何立にされてるかテスト文章っていうその組み合わせ構造化されたデータをいったん持ちたいなと思ったんですけどテレビにもストラク取ったのでこれを使えばいいんやなぁと思って行ったことないけど始めようと思って置いてあったのでちょっと気にしてこれをまたニューする全くわからんとも
transcript 0: けど今なら理解できます分かんない人は第2回を百回くらい聞くとかマジで後出てきてくれる怒ってください本当です山本直感的な感じがしないっすよねあいうえおあい項目でももう1時間喋りましたねおやすみ項目10時で終わりました項目12までいくと比較演算子の話になるんでがっつりやった方が痛むつなげて話しした方が良いかと思いますので一旦釣り項目中1項目11モジュールに行動熱として名前空間をつくろう前回モジュールはモジュールクラスのインスタンスですみたいなこと言ってでも16人で使うんですかいろいろですけども大体最初に初めて見るルミネ初めて見るモジュールっていうのは名前空間のモジュールを始めてみますねきっと
transcript 0: 例えばゲームを作ってみようとかゲームの中身を見てみよう先にいきなりモジュールと書いてあってでもなんでも十分たら確か先週も言ったと思うけどと塊っていう意味でもしれませんねここだそうですねそういう風にも使えますねそれでこのサンプルではバインディングっていくら下げる作ってるよバインディングっていうクラスはもあるんすよそうなんだバインディングってクラスをオープンしちゃってそこのいいんじゃないぞを書いちゃってるんでそしたら本来提供されているバインディングを殺しちゃってるって言うのがサンプルでそういうことやらかさないためにちゃんと自分の名前の文字列を作ってその下にバインディングっていうのを使えば作れますよというのがここで教えですねそれとあと押してねって言うのに名前空間モジュールオネストして
transcript 0: 名前空間作ってそれとディレクトリの構成を合わせましょうねさらに最後の教えとしては汎用的な名前は重複しちゃうんで明確にトップレベルのなんか形で悪いとか箸を使いたかったらコロンコロン歩いて彼はちゃんと使えるよと言うのが心を教えて北一番近いのは履歴鳥居構造と名前空間の関係なんですけどは誰が決めた誰のおすすめゲームルビーの世界の標準のライブラリも多分そんな感じになってませんかねじゃあ慣習的にいってことだもう何か多分パールもそんな感じだったような気は
transcript 0: 対ではないすねここに書いてあるのは名前空間を使う時にはプロジェクトのディレクトリ構造に名前空間忘れては普通だ普通は普通に従っておきましょうってことが普通逆にこれは従わない言語ってあるんですか自遊人別に入る日は自由ですけど例えばリアクトとは書いててコンポーネントあるめっちゃ走るとスネ夫役と J ストがやっててコンポーネントはコンポーネントディレクトリに置かなきゃいけないモジュールは文字にしておかないといけないでは色々決めてるけど結局おすすめとかこうあるべきって何もないでしょあれば自分で早退パス書いてくるが下に来るとかなり可愛い赤ちゃんでしょとかインポートたじゃんそうですねあれは何かまだみんな一生懸命頑張って
transcript 0: 迷ってるところはありますよね後でメールするから入るとディレクトリの名前とクラスの場所とかも汁の場所っていうのを正しく合わせないとまともに動かないっていうのは誰の仕事かっていうのはわかんなかったんですよ後エヴァコントローラーはコントローラー頭の下に書きますねアップすらコントローラー担当クラス名とファイル名が合ってないとうまく動かないっすよねうまくロードされないと言うべきかなそれから入ると愛をぐるりというのはそういう世界なんだと思った強されて初めて自分のジム作るときにああ
transcript 0: 4ディレクトリ名とファイル名をとクラスメイト造精密に合わせないときっと作っちゃいけないんだろうなと思いましたが勘違いですよね勘違いなんじゃないですかね良いというのはちゃんと守りましょうねってことですか古いダムにやられるかは自信があった方がいいとは思いますけどねどう思いますけどね
transcript 0: 誰もそのネイルズがあれ何ですか何とかオーバーなんとか
transcript 0: コック COC コン8 configuration 規約を守ろうぜっていうアレな一つかなーって思いながら受け止めてたような気がしますね気にしても ID はないけどコマンドラインインタフェースでファイルを認識する予定としてくれるってのもすごいなと思いましたあれから入ったので
transcript 0: お前は割とフレームワークあるのかないのかフリーダムなところにいたんですけどその後にネイルズ触ってこれは非常に助かるのだとしたですね FREEDOM はどこにファイルを変えないからそれだけでもだいぶで返すよねオランダ村とか昔 PHP レコード会社に PHP 行ったことないんですっていう僕より年上のほうが空いられて電話ページ目頑張ってやってやってみますってやったんすけど家のインクルードかな形式で入るそうですということですか import require もあります改行この他にファイルが挿入されるって言うのは
transcript 0: require import かな同じように動いてどっちだったかなブルーレイ8回しか読み込まない require 1スト include ワンスってのがあった気がしますねとデータベースを接続するじゃないですかそれを殺すコンテキストローカル変数に保存するっていうコードがまずあるとして使いまわせるじゃないすかねだからそれは関数にしてうまいことすると使いまわせるからその関数にしたものを include とか行こうとするんだろうなして作ってるんだろうなーと思ってある人全ソースコード見たらなんとインターフェイスがその変数だったんでしょ何言ってるかわかんないと思いますけどとあるファイルで撮るコンテキストニコルデータベースどこのコント価格ですか
transcript 0: って相当ある変数っていうのグローバル変数その引き直して次の行で使うためにデータベース接続. PHP ファイルなるでしょうの中で$ A =接続とかってそれを関数をそのロジックを使いたい PHP ファイルにはインポート書いて突然その人その次の行が通る映画困難かける俳優でサインフェルド仕事がスープラ include とかも自由だから育てるには欠けるけどまさかこんなこと書く人が居るとは思ったんですよで何でそんな事になったのがあった時に思ったのが今言った通り規約とかこうは作らないんやでっていうのをコンパイルエラー以外に教える方法
transcript 0: ないんだろうなーって思いました昔は確かにそんなん普通でしたねびさんとかね早くもないもんねもうクラスもまともにあるだか何だかですよね誰かそういう子だったような気がするけど何か非常に繊細で書いてる順番に依存してても古い形式でやったことないんでそういう文化がいなかったというかなんかがあったと言った変化それが許されてた時代があったとことですねそうですねとにかく include 途中途中に HTML の途中にエイチディーエム PHP のコードがやってハマるとまだからなんだろう僕が昔言ってたのは高級 Server Side include 9サーバーサイドインクルードそれもあまり皆さんあまりもピンとこない
transcript 0: サーバーサイドインクルードは include っていう言葉がねいろんな言語によってよりますけどね SSI CGI と一緒に出てきた言葉なんですけど今日はちょっと HTML の中に混ぜ込むことができて今中そこにしているが書けたりみたいなそうなったんすよ昔はドット shtml みたいな拡張子があってそれがサーバーサイドインクルードで動いてますよみたいなのがあったんですけどピーチピット高級 SSI だよねみたいな気持ちもありましたがそれのよりでかいのをかけるぜバージョンそうそうそうなんでその頃の文化だとそんな感じになりグローバルに露出したみたいなの全然ありますよと響きの中とか見ると凄いっすよ
transcript 0: 昔の昔の昔のやつもね三くしょんの中がグローバル宣言だらけなんですねあっちゃこっちゃでいくらとかどうとか Java List ティックをつけたくて付けたくてしょうがないって言ってこの辺のやり方とかもそうなんだよな結局レイルズとかこう時は彼もそうだが絞った方がクオリティがあるんじゃねっていうのはまさにそういうことをやっちゃうのを防ぐという間ですよね元々るみがすごい自由なので PHP math 持って行ってましたよねでその比較的自由な世界の中でもうおれーおれーな多分レールずになる前の PHP のフレームワークとかもたぶん作ってたと思うんですよなときにいややっぱ
transcript 0: 今日はいいんじゃねっていう形でサファリを入れてある程メールお礼るって表現にしたんだなっていう風に感じましたねむしろ自由に書けない方が効率いいところもあるからそういうことをやるためにその専用の言語がほしいってんだみんな思いますもんねその結果 PSP 写真プラじゃなくて PHP だとかペチペチやってる日だとかなんとかだから今すぐ言うと何ていう気持ちが湧いてきてそっちベースでちゃんと言語の剪定とかもできると腕も上がっていくんだよなーって気がしますねはいはいああごめんねまさん続きがあって俺は Ruby の変わった共同なんですけどももう10の分割して定義する際 module for サンプルではスーパーダンクリプトっていうモジュールをモジュールスーパー団 crypto key =パスワード
transcript 0: 相手のペースを保ちから始まってね選んでとじるとなりモジュールスーパー団クリプトお腹には定数記号のパスワードだけが決まっているという中で後でと共汁の中にエンクリプトってクラスを作りたいんた時にクラススーパー団クリプトコロンコロンエンクリプトっていうのでまずクラスを始めると名前空間としてモジュール名コロンコロンクラスメイト書くとその文字の中でクラスが定義できるって言うから方なんですけどもうそういうの中で単に切手格闘これはスーパー団クリプトの文字の中のキーだからルビーはうまいこと会社としてくれて来いって書くだけで同じモジュールのキーを見つけてくれて値を使ってくれるだろうと思ってるとなぜかエラーになるとネームエラーですねそのままありませんって言うなルビーの場合は
transcript 0: レキシカルスコープ文字を見てのスコープだとそのクラスの中とか記号教えてきた文字列の中とスコープの共有しないんですよと何でちゃんと書くときますーぱーだんクリプトエンクリプトってクラスを定義の中でもちゃんとスーパー団クリプトコロンコロン聞いて書かないと値が発見できなくてエラーになりますよということに注意してねサランツッコミとしてロビーにはグローバルテニスはありませんトップレベルの定数は全部オブジェクトってものに格納されていますとなり何の名前就職してもない何にもない定数違うルフィーじゃないとほとんどはオブジェクトあとプレビューの定数は全部お風呂に入ってるんでさらにそれををみんな継承していってるんで実際にはどこでも使える定数だこれと思って書くと
transcript 0: それは実はどこでも使えるグローブはなぜ砂じゃなくてちゃんと高継承階層上にも上に上がっていってこの定数のことねっていうのが使われますよというのが凄いということを一つに書いてあります北納得できなかったことがもう一つですね何かあれですよねあのジュールの中のクラスの中で親にあたるモジュールをインクルードするって書き方もしますよねそうすることでスコープが同じになるんだなって定数は呼び出せるようになるなるほどねぱっと見待機してタイの方になりそうですけど何かねすいませんしないすよね不思議な話なのそういうこと Ruby include 循環インクルードさどうなんですか何も起こらない
transcript 0: クロスはインクルードできないじゃないですかモジュールの中でも充電器持って行ってその後出来んのかなモジュールは行くので来ますよねモジュール module できますブルーレイはモジュールビールとしますのでモジュール B を用いるようにくるしますってなったらそれはやってないけど今言ったのはそのモジュール A の中の Class B の中で include A ってするって言うよねそうなると何の問題もないかクラスの定義しかないもんねそうですねほんとねそれ一見意味わかんないですよね何かあって思いますけど
transcript 0: 今なら谷定数とかその辺が魅力なるって事ですねそうですねそれそういう風に書いとくべきでしたねそうじゃないと1日経てばクラス名が買っとき大変なんですよこれ全部違うんだかやっちになっちゃうんで今のインクルードするやり方が一番賢いなと思いだと思いますはい今日はもうこれで1時間15分社縁ましたがまぁこんなとこですかねすいませんなんかだいぶ脱線をたくさん喋りました全然良かったと思いますおかげさまで一時間調べました適当に取りに行っていただければもっとね項目話す項目について話した項目についてゴミが欲しい気持ちになってきましたね前回の反省を少しずつ入れないといけないなと思って前回のフォローアップかあそこは行ったけどねた町
transcript 0: 高齢者とかこれ調べたらこう書いてありましたとかその辺を少し話す時間を設けた方がいいだと思いますそんな反省があって性能がいいから続けるコツとして一方的にまぁまぁまぁまぁまぁまぁそうですよ週に一回一時間半収録して一円にもならんって結構辛いんで何かうまいことマネタイズしなきゃいけないなと思ってます番組ステッカー作りましょうはいなんでもその反省してるかどうかはともかくとして過去の値段を張り具合に料理しなおせばコンテンツを作るっていう意味でいうとだいぶ量産し易いとは思いますね俺は今いく秩父 JavaScript とか effective Java あるんですけど手元にないこれが果たしてモダンなの買ってだけどわかんないですよ多分もだんじゃないんですよ自分でした
transcript 0: めっちゃ昔の FX TVer アマゾンで第3版第3版でと第3番一般車2018/10/30あったらしいところ明日は Kindle 版でした単行本版単行本ダメ2018第三版第3版去年のまとめたんじゃないですかそういうことでまずそれをゲットするとこからそうですね2019年2月に最新ではないものの効果的な使い方が学べるとおっしゃってました明日はちょっと Java を語れる人を見つけて連絡来ないんだじゃあ今日はこのところでバイバイはい3回
transcript 0: はこんなところです第4回は様々な10日の違いを理解しようねその63がコンペ荒ぶるの四角形の話ですね大好きな===の話ですねきっとこれ大好きとそんなに詳しくないですよママはこれちょっとねお勉強して頂いて行ってきなと思いますはいこれは来週ぐらいにやるんで来週は出張なんでちょっとわかんないですけどもタイミングあったらまた収録してやりましょうはいはいじゃあ第3回はこのぐらいで体重は大丈夫回も聞いてくださいどうもありがとうございましたありがとうございました
