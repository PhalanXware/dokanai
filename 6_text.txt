transcript 0: 第6回運動会を始めますどうぞよろしくお願いいたします明日お願いします今日は2019年7月3日夜22時4ぷんですかゲストは渡辺さんですよろしくお願いします仕事しますか Podcast はアンチ積読で本を読んでそう内容ゲストで出演するという Podcast ですまたの自己紹介は大家さん探して下さい殿下日本製なので音量金テープができなくてたぶん前回のやつは結構大きめに聞こえたと思うけど全然書いてないその前言ったらまた入っちゃったよおいしかったり目標はこの音量っていうのが全然こイマイチピンと国鉄のやり方は何か美味しい prox で原因とかその他もろもろやって見るんやけどなんかねいまいちピンとこないなぁと言われないようにするノーマライズは行ってるんだけどなんかそれ以来のピンとこないと
transcript 0: カバーアートを作ってもらいましたおめでとうございますありがとうございました&ページがいくと Twitter の何だっけ Open graph の方は多分更新されてないかもしんないけどなっちゃってアンカーとか直接見ると更新されてるので是非 CD のジャケットみたいなデザインをしてもらったんでまぁそれっぽいんですけど寝てて僕の中ではこういうテイストでやりたいんだけどなんか真面目にやってるなーって顔はありますよねこの週末ねちょっと土曜日曜と祝日イベントに参加してって土曜日はシビックテック日曜日 it 課放映しててちょっと時間がなかったんでちょっとだけなんですけども雨なんとか今週中に公開したいなと思ってない本編早速
transcript 0: 今消化おいた本店前に本品の紹介忘れてました本はまた effective Ruby ですだいぶ進んで来て全部で何個あるのとかな全部で8種全部で発症中今日は第4章終われば半分ですようやくようやくですよ本当にお外では半分女の第4章は例外です1回目がとりあえず栄養膜とエラー条件があまりにも work METHOD から煮るを返すというのでは全然足りないと感じる時がある全てが台無しになった時にはスタックを巻き戻してエラーの詳細を提供するが精一杯だと男の飲用にもある通りやっぱりエラーになったらリターンにするのが標準的なんでそうなんですかねまあそういうのは置いといててこの章の目的は例外に関する一般的な問題を避けて銘柄正しく使う方法を
transcript 0: そして最も重要なことだが例外の発生と安全に共存できるような書き方を説明するとありますが真似といえば昔 VB . net Microsoft VBA Visual Basic 言語ので同じく Microsoft の雑誌だったかなにオンラインにコラムが掲載されるまでお願いクラブの再塗装したんだけど error Go to hell と結構過激な見出しのバスがあってまぁ何が言いたいかっていうと VB の場合はエラーが発生したらどこに行きなさいよって言うつもりはここでいう例外に近い車両 on error go to って言うんですけどそれはめちゃくちゃ書くと地獄行きなぐらいコードが効かなくなるよという表現はそれでそれ
transcript 0: 今のところ無計画に何かあったらこっちに来といて飛んでくれやっていう風にどこで Go to go to って言ってますけれども実際にはある程度構造化された交通でその例外のスローキャッチの今今のルビーとか Java とかスイパラぼい書き方ではあるんですけどもそれでもやっぱ使い方間違えと地獄を見るという表現だったのでこの例外って何加工アプリの全体的な設計と言うかねとか後新チームに入って例外が起こったらこのプロジェクトどうするべきなんかっていうのはわりと何ですかそのやり口ごとのそのプロジェクトの大仏でかい指針と言うか5回ぐらいな気がするんですよこの例外が起こったらどうするべき録画こうしようとかああしようとか高校巻き戻そうてよねこれちゃんと決めて
transcript 0: この人との位置なんかプログラム帰る時にこの場合どうしますアドバイスをしますその前にしますっていうのを一時聞きながら進めなきゃいけないんですけどねきれないんである程度決めてというかしっかり決めとけば和歌の書き方気にいらんとかなんで霊界に9日とかそういうのでテストが出るときにパックリいちいち気にせずにある程度ガイドライン決めておくことでプログラムかけると出てプログラム書くことの快適さとか全体的な保守とかメンテナンスとかそういうのにその下を大きく関係するものだと思っていますこれが好きなんで結構卓球手取りフリーダムにかけてしまうんだけどブリラムに書くと大変なことになるんである程度共通の見解とか書き方
transcript 0: 絶対言うなと思ってますでもコップでもこの書き方は非常に科学をかけなさいなって割と怒られんでなんで例外めっちゃ勉強しておいた方がいいなとは思ってますはいあとまぁそれが僕の恋愛に対する見解でどんなとこですかどうですかねもうですね Web アプリだと生まれる前の話に持ってっちゃうとまぁ基本的な例外はまつかわなくており全体ではねアプリ全体ではあんま使わなくても一部のライブラリに使うみたいな感じがちょっと多いかなと個人的には思ってますね最終的には結局ユーザーに何らかのステータス返さないといけないじゃないですかそれ出す行動という会社だそうですねたとえば孫満点はもうほとんど不慮の事故でそれ以外の前400番台とかのエラーを何らかの形でやっぱり返すところまでやる
transcript 0: カープ基本かなと思ってたのでまぁエラーの状態を持つオブジェクトを作ってそれをバケツリレーするみたいな感じなんじゃないんかなあという音を持ってますねアンで自分で一部のこのライブラリはこういう例を挙げるときはあるよみたいなのは決めるけど全体では基本的には例外があの電波しすぎちゃうことはないっていうか決めるべきはプロジェクトごととかライブラリごとライブラリライブラリごとの送信はあれどアプリ全体としては的を得ずしづらいというかしたら高校会 Web アプリだから壊れできる2のアプリだから普通のアプリ添加 Web じゃなくて他でも cli のプロジェクトのツールながらこうあるべきとかってアプリの性格によるってことは確かにそうですね
transcript 0: 項目でもいると思うんですけどじゃあ早速それで行きますかあのその中で話ししてきたいと思う項目22 DAYS にはただの文字列ではなくてカスタム例外を私に買ってとリビアとレイダースさせるときはレイズって書いてあったパラメータを渡すとどうするとそこで何か問題が来たよということを伝播することができるとでとりあえず一番手を抜くとレイズの後に文字列をなく例えば fatal error とか立てパラメータが足りませんとかいうのは一文字列とアクト化成できるんですけれども書いちゃうとランタイムエラーオブジェクトがちっちゃい時にあげられますよと runtime error っていうのはその名前の通りランタイムエラーのためにをほぼあるもので泊まるところこれプログラム
transcript 0: 終了以上終了以上状態で終了させてくださいよーレベルの例外が発生しちゃいますよとなのでランタイムエラー文字列って書いちゃうとそれが発生しちゃうんでそうじゃないこれはおそらくプログラムを書いてる上で runtime のエラーなんじゃなくてこういうことを期待したんだけどこういう理由で期待に添えないというのが自分で作るレイが入って完成させたい狙いがほとんどだからそういう場合にはちゃんとそういうクラスを作って新しい例外クラスってどうやって作るかって言ったらまず標準例外クラスのどれかを検証すると標準で暮らすっていうのはルビが提供することそれで低水準エラーではなくて STANDARD error オッケーそうしましょうと言ったらあんたは本当にランタイムのエラーなんでは終わっちゃうんだけどこの STANDARD error であってそういうのを消しなさいよ
transcript 0: クラス名の最後は何たらエラータイ語がエラーになるように作りましょうねとのが一般的なやり方ですが三つの数はねやめてやめておきましょう会いできれがプロジェクトにつきタンダードエラーを継承したオレオレプロジェクトエラーをまず化粧水を作りましょうねさらにそれを継承してカスタムエラークラスを自分で作っていきましょうというのがコツだとすれば俺はこのプロジェクトではプロジェクトに参加した人が発生させてエラーなのかそれとも本当にルビーが出してるヘラは何ていうのが分かりやすいんでそういう風にしましょうねさらにそのクラスを作る時にはそのイニシャライズ作ったらちゃんと中でスーパーに起きなさいよという風に書いてありますそれはなんで前勉強した通りイニシャライズっていうのは
transcript 0: 親クラスの誰とも呼ばなきゃいけないんだからちゃんとしときなさいよね次は何をするとき水は冷蔵庫がたくさん書き方があるんですけれども飽き足らず文字列ってやると runtime エラーオブジェクトが発生して au の文字列にはそれが入るんですけどレイズ過去の自分でカスタムしたクラス鎌倉メッセージかっことじると例えばタッキーた手順でカスタムクラスを自分で作りましたよ自分で作りましたところのイニシャライズでなんかエラーメッセージを設定するようにしたとはいえばレールズっぽいもうだったら404.カウントっていうカスタム例外はどこで作っているところに resource Not Found って書くんだけどそのクラスをリースで指定してテイラー Message のところに自分でカスタムしたオリジナルメッセージを入れちゃうと
transcript 0: その他北 resource Not Found って何サイズか記載ちゃいますよということに注意してください4話レイズって書き方が何種類かあって冷蔵庫オーブンは頑張って覚えた方がいいということで冷蔵庫に並べて紹介しますがまずレイズ文字列っていうのが今まで行ってると俺ランタイムエラーになって良くないとあまり避けた方が良いパターンでレイズ part 2カスタムクラス名は5時ですよ明日のクラスですねカスタムクラスを書くとどのカスタムクラスを New したものがレイプされてその次の履き方としてレイズ part 2カスタムクラスのインスタンスを書くと内部的には exception メソッドこのオブジェクトの exception メソッドは引数なしで呼ばれててそのインスタンスが選ぶできますよってないって誰か来てここで説明してる注意しなさい浮気されますよっていうのがレイズ格好
transcript 0: 例外クラスのインスタンス間まぁそこで指定した文字列であると exception メソッドオブジェクトの exception メソッド引数ありで待たされる酸素イニシャライズので設定される後にさらにその後に文字列が設定されててそのコピーがレーダーオブジェクトになるんで前にチャレンジの結果が反映されないってことで開いただけで項目にはこんな感じなんですけどどうですかこんなに色んな使い方したことないですねとの作成時別の話ですけど僕大体レールで初めてクラスを作りたいオリジナルクラスを作りたいよぅはビューに属してるわけでもない等に属したビューにも属してるわけでもないモデルに属してるわけでもないボトル連続してもんでもないクラスを作りたいな最初に思ったのはこの
transcript 0: error OBJECT error CLASS カメラプラスどこに書いたらええねんっていうのを買いました女とは関係のファイルを作ろうとしたそうですけどどういう事ですか例えば自分で実際やってるのって何らかの処理をするライブラリがありますそれようにモジュールで名前空間を切ります実際の処理のクラスを作るのと同じ領域同じ階層に例外のクラスをゴンゴンゴンで作るそうですねそれが一番多いかな実際問題連立でオレオレクラスってどこに置くのがいいなってしまったんですか一番正しいかどうかは
transcript 0: ナイスけど例えばリブどこに置くんだっけアップの下塗り目の下 au の下に置いたりもするしあと最近だとそのあとの下をさらにもっと色々細かく分けてるのも多分多いと思いますけどねがアップしただけが頑張って落とされるんじゃなかったっけ今はそうですねまぁあのあんまり厳密にはちょっとわかってないですけど音ロード色々ね後になってから変わってやってこうやってみたいなのが良くないからこれはあれですよねあんまりちゃんと覚えてないですねなんか Custom module 作りたいときはだいたいコンサートした作ったんよ2秒に属してるものはビューのコンサート4モデルに属するものモデルの香音三田市コントローラと癖もなくなるか組んだけどいやその MVC の取れて
transcript 0: こういった例外とかのクラスをまず作りたいんだけどでも思った時にどこに作るんやろうって思ったっていうかさそれで描いて独立してるのを作りたいなっていうのが僕の今の発見ですコントローラーが例外吐かないようにしてるかなあればどこでもいいんですけどのカスタム隷奴出かけますじゃあさっき言った通りですねそのクラスの中に書いてそのモジュールの中に書いちゃったモデルがモデルが一番例外だしてるオートバックスしたいこととかあるかなモデルに恋愛書くとしたら例えばアップのモデルのどこですかアップのモデルの
transcript 0: 例えばパフっていうモデルがあるとしたらスタッフモデルの中に書くとですかこのクラスの中にはクラスかけないとか後でかけるとグローバルな例外ってまぁ滅多に作らないなっていうのこの人の中のその名前空間の中での例外を作るっていうやり方しかほぼしてないですねクラスの中に暮らすかだと思うんですけどあんまり褒められないパターンかなんだことないんかなお前ちゃんと暮らすは別ファイルかけようと言われちゃうパターンですかなことはないのかなあんまりロボコップ真面目にかけてないのが今のでさらに再確認される感じですけどでもライブラリあの世の中にあるライブラリ割とそのパターン多いんじゃないかなっていう気がしてたんですけど確かにそうかもしれ中に
transcript 0: 隠蔽されている方がいいんかなクラスが外にその例外が外に投げられたとしてもまだわからなくもないじゃん分からなくもないですねそうですねながらさっき会ったその検証してカスタムのエラークラスをまず作ってそれをさらに検証しろみたいなのがあったと思うんですけど行ったことないですねなるほどでも名前空間の中に作る堺つまりこの項目にニートの目指してることは同じだけど運用が違うパターンですねすごいですねさんと内側のエラーかどうかっていうのは名前とかを見れば分かるとほどこの項目22項目23以降もついてくるからこういうやり方がオススメしてるんですよって言うんで今一旦次は古木23列目しますねここ23はできる限り狭い例外を処理するですようにしましょうということで全部レスキューするんじゃ
transcript 0: という話なんで対応できる特定のクラスだけですけどしましょうレスキュー分画時にはちゃんと最も限定的なまつまるところ先の継承階層で言うと具体的なタイプを最初にプレイしましょうねと例外クラスの上位のクラスを上に書いてそっちで処理しちゃうで何でカスタムクラスを正しく正しくって言ったらまたですが間違ってるんですけどあのよくテレビで推奨する書き方とりあえずパンダードエラーを継承してプロジェクト用のエラーソロプロジェクトエラーを継承して具体的なやってあるとこのレスキューする時に最悪プロジェクトエラーでレスキューすれば再度このアプリの俺たちが知ってるレスキューを書くことが出来るとのでスタンダードエラーとかの汎用例外で捕まえちゃうとそれも最終手段的なファンだけどまだ痛い何か間違って
transcript 0: そういうのはだいたい何かあったらどうするんじゃなくて何があっても実行するっていう演じなくて使えんしは雪で処理できますよいうのが項目に13って書いてあることですねそういうわけで項目22的なやり方をするとこのプロジェクトでのエラーの場合っていうのが描けるんでいいですよって言いたいんでしょうねきっとまだ痛い声で項目に痔になるといいことがあるって言うのはわかっていただけたと灰鰤項目24リソースブロックと編集あってかんですよを練習上がってるので読み方いつも俺にコメントするんですけど選手は電車と言われたくなるほどじゃあ項目24のバイクとメモリは自信があるんで練習が処理してくれませんただ調子が処理してくれないリソース
transcript 0: 終わりますよね会えるのリソースとかその他もろもろねこういうのは例外が正しく処理しないとリソースリーグっていうのは間違いなく発生しますよというので小説を書いて何とかしましょうと店主は雪っていうのは他の言語で言うと言われる finally とか言われてるやつで俺以外が発生するとか例外が発生しないというロジックの最後に書いとくと演習あこれって書いておくと何があっても最後には飲食が必ず実行されて終わるとゆのは今雪今雪が一番使われてるところは一番使われてる違うのは一番身近に見るものはパイル. open 大文字の入るとオープンでメー指定してブロックを指定して実行するとブロックにはあの入れるポイントを何て言うんやバイオリソースファイルハンドル化
transcript 0: ファイルハンドルが分かってくるんでそっからファイルを読み書きすることができますよとで読み書きした結果途中でブレーキブロックの中を連れてどう割らせようが最終的にはイーブイの内部実装では雪で最後に巣を作るとするようになってるんでファイルオープンのブロック版というのは安全ですよでこれを真似てちゃんとリソース管理者抽象化するためにクラスメソッドのブロックとブロック事故後に飲酒がするっていうパターンを使うとしか開けませんがとか綺麗にリソース管理できますよと私ですね演出で調理する変数は必ず初期化チェックすることってあって確かにこれがいいとかで書くと変数があっちゃこっちゃというか初期化する前に電車は雪まで飛んできたりなんだかんだ言ってしてイマイチこの変数どうなってるかよくわかん
transcript 0: ってことが多いんですけれども初期化されてない場合には必ずいるが入ってるって言う風になってるんで見るの場合は何もしない寝るんじゃない場合にはリソースを解放するとかやるとか声かけますよ履い電車はどうですかじゃああんまりよくないんですけどしてないんですよね堺ですよね彼はなかなかなくてもすぐなマンあのハイ天日なんか盛り上がってた議論で冷害の方が早いか遅いか問題っていう Twitter で出回ってていやいや例外はコスト重すぎるやろっていうのが来お兄さんおじさんプログラム共通見解というか結構恋愛と大事やぞって思ってるんですけどそうですねいやいやいやもう全然コストじゃないからバンバン使うべき行ってその方がむしろ早いんじゃ
transcript 0: 何が早いかっていうのはそこには書いてなくてコードを書くのが早いのが実行が速いのかよくわかんないんだけど彼らが主張してるのは実行も早いという結果が出てきて本当かよと思ってるんでなるべく例題使うのは避けちゃうんですけれどもというそういうのが事実だか何だかよくわかんないものを見てもいやいやいや例外は遅いでしょう例外はまずいでしょって思っちゃうぐらいには例外を使わないのは僕もたぶん同じなんですけど例外使った方が綺麗に書けるようになっていうことはたまにはみますねただ項目220024の話をしてるんですけどただ僕が言ってるのは僕が今までそうだよなもしかしたら例外のは綺麗に書けるかもなあと思ったのは項目27の項目で話す内容で済む可能性が大いにありうるんでやっぱりそれくらい使っていけないのかなとも思ったりもしますはいはい Ruby で滅多に使わない
transcript 0: でも滅多に使わない興奮ボイスよねやっぱそうなんかにもスローがあったんだってとか香木27それは入った後のお楽しみとしてこのリソースの割れレールずーとやってるか見る限りはあんまりこういうものを使わないでモノレールの中でもレンズがうまく隠蔽してくれてるから使わないんであって本来の音データベースを接続リソースとかその他もろもろいうのはほとんどこれですもんねほとんどの場合は寝る日が終わればリソースはクローズされるからというものも別に真面目にクローズしなきゃいけないかっていうとほとんどほとんどの場合は真面目に苦労しなくても大丈夫ですよねそうですね個人的にまだあんまりそのコンカレント Ruby とか使ってないのでアレを真面目にやり始めたら結構気にしてなきゃ本当はいけないのかなぁみたいな気はしてはいます
transcript 0: コンカレントルービートは音カレントルビーとは説明するとはいそうかもしんないですねとルビーとはでググればなんか適当なさいと出てくると思うんすけどどうすっかなーどれにするかなと言ったこれにしようかなと言ったら出てくる一番トップの翻訳何でしたっけアンカーのリンクに貼っときますね今回レンズルビーは関数型言語の興味深い ID 文古典的なコンカレンシーパターンを多数取り入れてそれを基礎として構築されたコンカレンシーする人ですかわかるのかな難しい本借りる日はアクティブサポート経由ですでに導入されていますとメールアプリでスレッド化コードを書くたら他のを探す必要はありませんどうぞこのスレッドがどうとかって言うのをまぁあんまり普段蛇に使わないのであれば OS の
transcript 0: メモリもそうですけどそれっ土とかその他もろもろってのはねどうしても取得したら解放しなきゃいけないっていうのは何て言うので一部なリソースプリミティブなと言うべきか OS が提供している機能ってのは大胆に開放しなきゃいけないから俺とかで変わる場合はこのリソース解放周りのはシビアにやんなきゃですねもうちょっと気をつけないといけないのかな今よりはっていう気はしてはいますよね普段は割とその昔ながらの一発もんでどうなって処理して終わりみたいなのが多いんでね何かありソースの確保とかそういうの気になる場合はそれで無ジョブに回しちゃうとかしちゃいますもんねここではそういうタイトなことはしなくてなんか後でゆっくりと行ってゆっくりとリソース解放してくれとかそうやっといた方がテストも楽だし何て言うのメインプロセスと分離されたところに実行されるから
transcript 0: 色々と安心感がありますねそうやって書いた方が負けの上部にしてあげればその解放漏れがどうこうみたいなのはあまり考えなくて良くなる気はしますね我々は意識に避けて避けて避けてるかなるそうですねそうですねできるだけ避けたいって言うのだけどこの前の音コレクション歌コレクションの回し方とかもそうですけど割とレールじゃないプログラムなのはごもっともクリティカルなところ OS に近いところをやるのはこういうとこにあるかなっていう気もしますよねだとそういうのを避けて開ける方向で頑張ってるって言うのが我々に行っていますかもしんないほんとにそういうツールを作ったり何だよ嚙んでする時はまこういうの買ってきて使いなさいよとねそうですねママそれに近しいことで項目26なんですけど重く26項目26についた項目20
transcript 0: 次は僕に15は練習は雪は最後まで実行して抜けるように作ろうとなんのこっちゃってると編集は雪の中で Return 文使うなっちゃう話リターンもダメならスローもダメこれもダメならもう提供するを変更はとにかくやめとけネクストのブレイクもやめとけっていうのが項目25年4月っていうのは駅前の説明書と乗り Finally つまるところ最後に絶対実行される雪月光される場所なのでここで購入フローを書き換える文を書くとか絶対制御フローはそっちに変更されてしまうんでさらにプレつまりどういうことかって言うと最初の4個が今回の最初の方で説明した通りレスキューで全部かけると何が起こったかさっぱり分からんからやめとけっていうののスーパーすごいバージョンになっちゃって
transcript 0: エンシュアリターンとか書いちゃうと何か起こったら絶対捕まえてリターンしちゃうっていう風に何書いちゃって実話なのでやめとけとしかもこの書き方すると正常処理のところにリターン書いてあってもそれでも握りつぶしてきたんしちゃうんで意味不明なことになっちゃうなにより男子のかわからん電車で来たを見るって事なのでは差分税条文のところ大丈夫な変化で支給されないで正常処理系のところで何を返してなかったんでよくわからんソースコードならやめとけよって言うのがここで書いてあるだけで印象を切断するネクストブレイクその他もろもろはやめておきましょうと言って書いてなんか俺だけ言われると使いたくなくなりますよね9月なのに追い打ちをかけてるって感じがしますね
transcript 0: 秋田 finally 構文と同じで finally 構文と最後に絶対実行されるんですよっていうところではもうリソースをクローズする以外の事はしちゃいかんのだよっていうことだと思うんですよねそういうの場合は大体間違ってるからプログラムを見つめなおしましょうっていうのがこの本には書いてあるはこれだけちゃうわ誰かねかけちゃうと出かけちゃう上に用意しなきゃいけないと伝えてこない猫北26は卓球の練習は何であるのかっていう近いんですけれども見た印象は関係ないんですが項目二ノ国トライでは回数の上限を設けてインドもなるべく変化させておりとトレイルを残しましょうオーディットトレイルはなんぞって言うと監査障壁画ログのことですねこういうトライをしてこういうことが起こっちゃいましたって言うのあの子しましょうに入っていると LINE してるんだから何のためにトライしようかと分かんないんでそれがちゃんと書きましょう
transcript 0: リトライって書くとルビーはレスキューした後リトライと書くとまたあのビギンというかあの元号で言うとかっこ開くぐらいの粉土壌処理型をまた最初から始めるんですけどもうこれ無限ループに簡単になっちゃうねリトライと書くだけでイッちゃうんでなんでもないって書くときはちゃんと恋符文とかその他もろもろで回数の上限を設けましょうよというのがここで書いてあるおすすめ廃止工事には頻度を変化させましょうインドを変化させるって言うのは例えば1秒後に実行リトライは次に秒後次4秒後18秒後みたいなで僕が最近見た中では便利ですねそうじゃないけどどっかで失敗したら何秒後にトライするってのはどんどん増えてく exponential backoff の機能ですって書いてあったんですけどまあまあまさにそれだなと思いました良い感じでどうですかリトライ
transcript 0: まずリトライをしないんですかそうですねあんまりしないいないいなしないですね僕が最近書いてあり虎岩 MX レコードこのメールアドレスが合ってるかどうか MX レコードを使ってチェックしましょうっていう話になってね MX レコードチェックするのにまぁネットワークの調子が良くて一回くらい失敗したことあるか3回ぐらい言ったりするように作ってこの辞書を使いましょういいですね買い物 API 外部の API を叩く処理だとそれはやっぱり入れますけどそれ以外ではあまり取ら言ってしないな気がするとかないですもんね本当な海とかどうだろ俺は相手にとられ使ってる気はしますけどねやる時はこの方が本が読めますもんね
transcript 0: もう1回トライしてんだっていうのは明示的ですもんねやっぱネットワークとかファイルシステムとかシステムはそうでもないかなネットワークとかそういえば俺が知ってるこける可能性は大いにあるところっては確実に声かけますよね部分ではそうですねはいではどこかな項目27コープから飛び出したい時にはレースを使いましょうとルビーにする王があるって知ってたっていう話なんですけど知らんかったわけだしんがんというとルビーは例外と非常によく似た制御構造を持っていて読者はこの制御構造を見かけたことがあるだろうしキャッチとスローという名前なので例外とごっちゃになってしまったことがあるかもしれないでプラヤ Java から Ruby に転校してきた場合にはこれらの名前は特に紛らわしいであるこれらの制御構造は例外と直接の関係はない
transcript 0: タッチとスローは交通の安全バージョンと考えることができるてましたか僕は知りませんでした Ruby GOLD を受けたときに知りました大域脱出見かけたことがあるだろうしって書いてあるけどまあ僕は知らなかったですねどんな効果っていうとたとえば Value =キャッチかっこラベルかっことじると書いてブロックを終わらせると A ブロックの中でスローラベルオブジェクトで書くとただ自分が終わってそのオブジェクトが買えるって Value = OBJECT になると作りやすい中身的には BEGIN と書いてレスキューリターン例外オブジェクトって書くような感じですねで例外じゃないそもそも例外っていうのは何かあったときエラーとかそういうも文字通り例外があった時
transcript 0: するっていうのがレイズの本質であって営業を今はどれさんが教えてくれたようななんて言ってこれをこの catch 文のことを何て言うんですか何と言うか大域脱出脱出大脱出をするのにレーザーを使うわけじゃないんだよと待機脱出を使いたい時にはこっちゃんと構文としておいてあるキャッチを使いましょうというのがここでの試合で勝つそもそも多分それ使わずに関すると return 文で済む場合が多いからもうそっちはちゃんと使いなさいとこれを使うっていうのは複雑になっちゃっての証拠なんで反省しなきゃいけないと思いますよっていうのがこの本に書いてあるのはどこですかねそうですねあの弱ブレイクを何個も来たいってことですねとおなかの中のとかそういう処理があればいくらでも書け
transcript 0: うけるんですけども大体1000円間違ってるよなまぁそうですね同じことを思ってる段階でおかしいこれを使ったはカッコよくかけるっていう実装はまだ頭ん中にないから使ってないのかそれともあったらもっとカッコよくこれを使って実装できることがあるのかいまいちわかんねーなーこのため日本の中のサンプルではもう3分に帆と書いたせいかわかんないですけどどの PSV 的なものから値が見つかったらスルーしてましたねなんかも一回ループして世の中には無限ループだとかどうとかママループの中に何かあったらそれを選べるで見つかったオブジェクトってやってバイク年寄りしてまたそれにさっき言った通り検索ロジックの関数作ってそれでリターンすると何が違うのと言われたらって感じですかねそうですねなんかすごい
transcript 0: とかどうすんだろそっかそりゃ結構大ごとですねどうやってパンツに擦れて楽なんでしょうけどね気がしますけどね複雑なバイナリのパンストが卒業後に使うのかななるほどそういうのはこれ使いそうな気がしますね何でしょうバカみたいにデカイサックス的な xml を読んでみたいな Pure Ruby で頑張るならそれが効率は良いみたいなのあるかもしれないすねそうかもねでも猫になってたりなんだりかんだりとか予約までできたらなとかって声の串揚げいけないでしょうねというわけで例外以上ですとあっさりしてますねもうなんかうんそうだなって思いながら聴く時間が非常に長かったね
transcript 0: らなんでまあそうですね多分避けてるんですよね使うことをそもそも恋愛っていうぐらいなんで普通使わないよねっていう気持ちはありますね意外なんでカスタムレーダーを作ってあーだこーだってことだと思うんですけれどもこれホントに最初に北説明した通りあればこういう配列の外を皮膚んでしまったとか奇数に入れるの外側立ってきた場合これは例外で処理するべきなんかにいれお返しすべきなのかとか色々考えちゃうよねあらかじめこのプロジェクトはどうあるべきか妻決めとかないと昔は C 言語スタイルの API を作るときは言語例外がないかなとにかく戻る値はステータスコードこの API の所為ですコードで何かオブジェクトを返す時は参照渡しで渡されたところに書いて傀
transcript 0: っていうのが一般的なボクらの中の僕の中の一般的な作り方ですなんかはまず作ってそれをリストオブジェクトが移動する時には参照渡しで渡されたものに中身を書きて返すという風になったんでなるべく例外というものがこの世に存在しない前提でそれを使うと対応できない言語もあるからということで生きてきたんだけど T シャツとか邪魔とか見てると例外投げられる投げるからお前それ前提で駆け寄っていうのをちゃんと手入れかけるそれで買ってそれを満たしてないとちゃんと書けないようになってるんでなるほどなぁって思いながら書いてかこういう世界だと例外をビシバシ使った方がどうなのか区か気なんだろうなと思ったことありますが正常系は正常系異常系異常系ですかね
transcript 0: 定数 PHP がその文化なんじゃねえッス文化ではその新聞を取ったり引きずってる変わったと思いますであれやられるとでも中身これ何って何かわかってきたけど何言ってんだった時に数値になっちゃってて数数値だとわからんていうのは参照オブジェクトに何か書かれてるわけじゃなくて例えばこの定数と一致してますかでやればわかるんだけど海の里渡ってきたものをまずインスペクトすれば何か分かるじゃんって思っちゃうけど何もわかんないですよね通知だからだと PHP のファンクション X を実行したとファンクション x3て何やねんっていうのはリファレンス聞かないと分かんないんであればちょっとうっとうしいなと思ったのはありますねそんなんだったら
transcript 0: 死んでくれって言って Windows でエラーコード-65300としたあれはねそうそうなんだよね確か言われて見るそうそうかしかも実質というのを真面目に使うのは定数を定義した人だけでプロジェクト参加した他の人は大体そのトンネル取り込んであんまり薬出さないっていうか結局ログを見なきゃ分かんないってことはまお米の冷害が上がってトレースが取れるって言うのはやっぱり慣れるとすごく便利なので取れそうだよねどうしてもそのあたりが根構造化例外のいいところで何と例外が起こったものの構造的情報がわかるっていうところがね馬鹿がこれでオブジェクトはこれで広告が出るのでわかるのが良いところなんだけど自分が使う時にはよっこいしょって腰を持ち上げないとなかなか使えないって
transcript 0: そうなんですよねお金は最初にガイドラインとして何て言うんですかこういう風に実装しましょうねこういうエラーはユーザーに通知しなきゃいけない例外エラーの場合はこうしましょうライブで握りつぶしていいんだけどこっそりと後で頻度は調べたいからこういうログが残しましょうとかなんか割とそういう話し合いを持って例外とかのデザインしないと中でみんな好き勝手やっちゃうと変なっちゃうんでアルバイトをしますこの場合どうしますって聞いててもキリがないんでなんか割とそういうだけですか楽しかったモジュール一覧を見てる映画一覧を見てなるほどこういうときはこうしてほしいんだなこのライブラリはと思いながらプログラム角度が大事かなというのはいつも思ってますがカスタム例外クラスがあるプロジェクトってなかなかないですね特にゲームを横断する
transcript 0: 大問題とかどうするんかなって思ってる2人でプロジェクトか言ってて自分が何個もありますってときにエラーはどこのライブラリでどこの税務課どこの税務で定義するべきな渡辺さんスタイルだと俺のエラーだってわかるようにそこに真と書いてきましたねそうですねまたがるってのは基本考えてなくて受け取った人は誰から来た母は間違いなくわかる今回の項目23日22日カスタム例外クラスを自分でつくろうっていう風ここのノウハウを学ぼうとすると m子はなんとか怖くていけないの作ってそこで定義しちゃってみんなこの例外を吐くようにしてねって言われないのかなと思いますけどどこまで行ってもなかなか見ないとぱっと手元にあったジムを開いたらこれがいい腹ですけど
transcript 0: キャミソール詐欺戦ってますね50系 B 腹の下には8なんだ M の一帯があってポリープがあってスペックがあって自分の中にカビバラ. RB てあってでその結果から. RB の中にはいきなりも例外ができされてますかモジュールカピバラ開くとその下にはクラスキャビバラエラードライブが Not Found error Frozen in item EVENT not found ってのは電源続いた脇腹のエラーですよチャは彼らを作ってその中に閉じこもったままだそうですね無理無理文ストラヴバラードと rbu 4割くらいはした時の読み込まれるファイルじゃないすか真っ先にそれが書いてあって実際の処理はそこからまた一個
transcript 0: あの Directory for てその中にあるのでご飯いらないんかな空の場合はトップレベルオブジェクトプロジェクトのプロジェクト以外が作ったのよと名前空間さえだけ切ってあるのであれば別に提出するわけじゃないんですか検証してますよまあそうじゃないと行動としても変ですよねスタンド&エラー以外継承した時間の間でもそうですね STANDARD error を継承してキャビンばらえらを作ってそれ以外は全部きゃぴばらえらお化粧してますか教えておりですねそうですねミックスですねこれが一番いいのかもしれないですねそう書いとけばでカピバラエラーでレスキューすれば最悪そこでカピバラ内部のエラーは全部引っ掛けてねんぴあ読んでる人のに例えばこういうエラーですよって伝播することはできますからね
transcript 0: 箱を書くのがベストなんやろな愛だとこですかね一時間喋りましたはいじゃあね外はこんなところで次は第5章メタプログラミングですこれを話す言葉でやる大分辛いからメタプログラミングはしかも2077項目ありますも読み返したんですけどまぁこれ相当辛いすねコード説明するのでだいぶ端折ってちょっと説明するかもしれないしそうですねスコープが変わっちゃうんじゃねぞどうですか普通にメソッド定義したときとうでお話変わっちゃうから結構おってなることがありますので覚えておくべき事項の第一行目が全てのフックメソッドは
transcript 0: メソッドを指定しなければならないと骨フックメソッド特異メソッドの説明しなきゃいけないんでもういきなり長い感じですよねそんな感じなんですがまぁちょっと頑張ってこれも言ってね1時間で終わるように頑張るわねえばるの設定を5分で仕事行ったのは相当きついけどまあ飯ちょっと頑張って行ってもと思いますはい今回はこのところじゃあ次も聞いてくださいどうもありがとうございましたありがとうございました
