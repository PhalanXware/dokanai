transcript 0: トレジャー第8回積んどかない埒始めます宜しく願い致しますよろしくお願いします現在は2019年7月14日22時24分祝日前日曜日ですゲスト渡辺さんですどうぞよろしくお願いしますそうしますとのことですと1日間で本を読んでその内容をゲストに説明するという Podcast です簡単な自己紹介話題変えよう鑑賞くださいまずは前回の反省僕の音量が糞でかかったです終わるんじゃなかったと思うけどどうでしょうそんなことはないそんなに気に気にならなかったですかの初回は聞いてた時ほどギャップを感じなかったし身体障害者4回ね初回は高かったけど音量だいぶ絞ってあることやってて
transcript 0: 調子こいて少し戻したらやっぱその少しがでかかったなっていう感じがしました愛の例ではいない今も悪戦苦闘するけどハムノイズ金取れない問題がどうしても辛くてなんなんやろねマイクを変えるしかないんかなあと思ってるんですけれどもググってもねやっぱそもそも解消するのは厄介でやって発生しにくいのは USB マイクですよって後で USB マイク買ったんですけど実際僕のゲーマー向けヘッドセットのとあるやつの方がそういうオプションがあってそういうオプションというのが Mac OS 標準のと何と言うのマイクインザミックスマイクとヘッドセットかヘッドセット用のやつでネタが環境を守るアクションをするみたいなオプションがあってそれをオンにしてるほうが実質綺麗に聞こえちゃってるって言うね僕としては USB のは綺麗に入るはずだなと思って期待してたんですけどなかなかむず
transcript 0: 橋本ありなんだなーという感じですそのノイズ消すとか音量でかいとかっていう問題があって音量がでかいことを何とかしようという気持ちが全体的な音量を扱っするようはちっちゃいところが大きく大きい所は大き過ぎずっていうことをやってあるために何かコンプレッサープラグインを使うらしいんですそのコンプレッサープラグインを使うといま言った後音量がクソでかい所はある程度リミットをかけて痛いところは大きくしたいって言ったのにそれだけなのにそのねこの昔の iOS 初期にあった地球も歪むデザイン覚えてますが会いたい芸能人にあるそれっぽいデザイン建具本棚ぽいとか何だっけゲームテーブルっぽい
transcript 0: ああいうデザインをまだ生き残っててプラグインのオーディオ系の奴は割と多いんじゃないそうしたらなんとかのつまみとか回さなきゃいけないんですけどこれが何を意味してるかとか擁護ぽいのがすっごい大変でそういう区今市8日からなんでこのつまみはここにあるのかっていうのは誰の音歴史的経緯があるんだと思うんだけどそういうコンテキストが全くないから難しい辛いと思って適当に挑戦して使った結果旅館でかいのはできちゃったっていうのが今の実力ということで少しずつもう少しずつって言ったらもう第9回から8回か2回はもう少しずつとかもうちょっとって言ってるまにもうねエレキテル終わりそうなんでもちょっとねそろそろ安定していきたいなと思ってますが本編で入ります本は相変わらず effective Ruby
transcript 0: をやってます先日は第5章メタプログラミングが1時間後目だったんですが今回は何歩楽勝だから柘植テストとかその他もろもろいけるんじゃねって言ってたんですが第6章テストはさすがに四つ1時間いっちゃうんじゃないかなっていうことで一旦今日は第六小テストをやるということで早く終わったので早く終わったでそういう番組ってことにしたいかなと思いますそういう番組走友会か時代かなと思ってますはいじゃあさっそく始めますね第六小テストミニテストは Ruby 標準のテストユニットを変えるべく登場し互換モードもあるらしいんですけどこの本自体が英語の幻聴がやっぱ古いらしくても監修者注意寒中ですねによるとか色々
transcript 0: ミニ鉄のドアにも変更があってあれだこれだっていう話があってなんかちょうどルフィイッテ Q 2.0この辺りが怪しいらしくてよく分かんないよく分かんないってのはこの本のテストに関する細い管細い明日方が融合した方がいいよっていうのはどんだけで通じるのかといまいちピンとこなかったんでちょっとルビーのテスティングフレームワークの歴史っていうものを調べてみたらルビーのテスティングフレームワークの歴史っていうのは株式会社クリアコード様のお父様がまとめてくださっててそれも2014年半くらいは2016年だから05年前なんでこれが果たして今どうなってる勝手ないまいちピンとこないんですけれどもそこも含めてこの後三者に教えていただければと思いつつまずは
transcript 0: まずはこのお父さんのまとめていただいた記事の URL をアンカーが抜けるように言っときますんでちょっとそこから追っかけてみたいなと思いますないと避けでこの本先に出ておりこの本に載ってるのは紅一点9とか2.0とか2.1の話が持ってるんですよ143ページに載ってるのは Ruby 2.1リリース以降っていうのが監修者注意なってるんで今のところこの本は2.1なんですけど歴史を辿って行くとどうも1.6の頃から始まるクリアコート様の記事を読むと1.6の頃からまとめる写真ではそこから1.6か1.6型と1.8型ってわりと話題になってた気がするなぁ全部がなかった時代ですね
transcript 0: 自分がないっては言って自分があるのは1.8から2でスマホの音でん六の時は1円だったかなえ68から行くのかなもしかしたら母はその辺の空飛ぶすねよルビー天禄の頃は Ruby ではテスティングフレームワークがバンドルされておりませんでしただけどルビーユニットが作られた時代ですよとしばらくしたらラピダリーも作られたラピダリー BB ユニットとラピダリーの統合してテストコロンコロンユニットテストユニットになったとあるんですけどわかりません使ったことないすね8の時代が来るんですけど1.8は2003年8月この時点で16年前16年前俺が背負ったやろ俺今48162
transcript 0: 4歳多分 C シャープと VB 書いてました T シャツと VB と天ぷらと紀元後一生懸命返さ WP の存在とは知らないんじゃないかなするとかそういう時代にテストユニットは Ruby 1.80にバンドルされた後は先ほど1.6でルビーユニットとラピダリーな統合してテストコロコロユニットテストテストこれはテストにちょっと読んでいいのかなとテストユニットが入って8にバンドルされてねテスト nrb ユニット互換 API を提供したとそれまで BB ユニットってのは1.6°と時代に作られてねルビーユニットとラピダリーがて統合してテストだったんだけど完全に互換ストユニットは Ruby ユニット交換
transcript 0: ここから雪があった後でルビーにバンドルされてからテストユニットの開発は停滞しちゃってましたそしてここになんと輝かしく R スペックが現れたとテストユニットのメンテ長後のミニテストの作者に変わりましたかなこの時はテストユニットのメンテナーベストユニット大竹はテストユニットあってそこに便利だが上演してきたとアクセメンズミサンガで後のミニテストと作者は複雑すぎてテストインテックスできないと主張されましたとあってはこれはテストヒッツのメンテナーが後のミニテストの作者に変わったんだけどその作者は後々に複雑すぎてもメンテできないって言ったとか成績とか本人かどうかちょっとわかんないすけどねまあでもまあそうそうでしょうね
transcript 0: 作り直したくなって作りましたのですからねそれで1.9の時代が来て2007年12月2007年12月のルビー1.9ドット0までテストユニットバンドされましたとかねそのテストユニットは2009年1月の1.9と1でハンドルが外れましたとその代わりにミニテストがバンドルされましたねミニテストでどっから来たのかっていうとミニテストの作者はメンテナンスできる小さなテスティングフレームワークとして右ユニットっての作り始めたのでミニユニットがミニテストに名前を変えてねそれが2009年1月に1.9点12バンドバンドルされたとか言って9.1のミニテストはテストユニット互換 API が付いてたんでこの本は互換モードがありますって書いてあるでもきっとこの方がこの本に書かれた本
transcript 0: レストユニットは test Unit 事務として開発を継続していると言葉が並んでるんですがどうなんだっけテストハイフンユニットでしたテストハイブリッド事務として開発が継続されていますとこれはなっちゃいますね使うと思えばそうですねでも1.9で一番都会なのにテストって言ってたよねそこから四年4年5巻2013年2月22日ずれて手がリリースされたんですがミニテストも test Unit マールスペックも買えるが続いてましたとは2013年2月ですねその10ヶ月後2.12013年12月22日がありされて2014年11月現在の最新版の安定ですとこのブログの記事が書かれたあの頃のできっとこの日付が出ミニチェストはバージョン5.0
transcript 0: で後方互換性ない API を変更したとこれがこの本に載っていることでこの本の監修者注意に乗ってることが実は猫の方日本語版のこの本が変わるだのはこの時代なぜ2013年12月より後に書かれた女とその結果テストユニットはミニテスト5.0出れをサポートできなくなりましたよと5巻 API のレイヤーが互換じゃなくなったってことですね今まで黙ってたんだけどってルビー本体はミニテスト4.7点ごと test Unit を GO ライブラリのパスを変えてテストスライブの匙どうして Ruby のテストではるみほんだしてね三本立てそれはそれらを古いバージョンとして使うことをした後でテストする
transcript 0: 以下にコピーしたミニテストとテストすらユニットルビが中がメンテナンスすることになってね Ruby 開発チームはテストすらユニットと言ったらテストスラリ6日にあるテストスイートのことですやっと NBA チームがテストすらユニットがどうだのこうだのって言ったらそれはテストすら再起動下にあるその一人がなくてそのことが出とったんでしょうねきっと回目ついについに来るべき2.22.2には最新のミニテストがバンドルされた維新のテスト最もバンドルされどっちがバンドルされるようになるとでヘビーユーザーがテストすらユニットって言ったらテストハイフンユニットのことになるであろう富山バンドされるからねテスト範囲にとって自分のバンドされるんでそうなるでしょうというのがこの作者の方がこのブログのを書いてる方がまとめた
transcript 0: 最終バージョンこの多分5年ぐらい前かな5年ぐらい前の最新状況がそういうことなんですよねタイで今どうなってるんですかおれまにえてすとハイフンユニットギットハブはいいよーって今見てますけどもこの時点から情報新しいのないんすよでも一応それで完成てこなかったんだとリリース自体は新しいの出てると思いますけどね11ドキュメント更新は出ないっぽいね2019年5月にテストハイフンユニット333月11日つい最近ですねこの間 test Unit リールの600が出てますっていうのはテストにとのメールが対応版ですねなるほどね英語で標準はこれなんじゃないかなと標準化ミニテストでした
transcript 0: ユニットだっけあれ忘れちゃったなくとも確かゲームはほっといたら rspec ですよねバンドルにとしていいバンドル忍者嵐べきではないと思いますよれーるずも標準は R スペックじゃないとアレですごめんなさいよ何のでも十分でゲームを作ろうと思ってバンドルユニットしてテンプレートを作ったら好きじゃなかったでしたっけいまそうなんだ全然記憶にメールのテストをしてそれぞれテストテストフレ枕に使うかって言うとどうなんかな時は個人的には誰スペック使ってるのでテストユニットがセットアップされないようにプロジェクト初期化して JR SPEC レイルズを+っていうだけしてますね確かレール the hot
transcript 0: ミニテストが自動的に採用された気がしますそれでその話なんだと言われるといくつかのかな隆史カレールーの5分最近は4後半か5合ぐらいから見れそうだと思います愛あれは何なんスか何かでもうこれいいやん array 判定したら決めるんですか男はチームの誰かなんですがそうなんだでもあるスペック別に全然どうかされてない気がしますね今日家庭のある SPEC を積極的に採用しようと思う人はいないってことそうですね投票がいいねされてないそうなんだあえ何だっけ dhyd ディールで撮って言ってるくらいだし嫌いな間取りリリーも含めてここから R スペックなんかミニチェストなんかその他もろもろってのは話がねそこに入り組んで来るんですけど結局僕もあるスペック
transcript 0: あーそうなんです確か鹿何か作るときにあそうなんだ R スペックつ帰って来いってある spec を使いレール2の標準髪にテストあって言うんだったら生姜眠いテスト使う勝手にテスト使ってるって言うぐらいの積極性となるところを自分から使いたいものは特にないっていう気持ちはなくこのネイルズは R スペックに寄せてますので作るときはミニテストで書いてますねではでは作るときに test 指定できるとことかだったかなそんな温かなちょっとググってみるかバンドル邪魔するときはバンドルバンドの CM 歌バンドユニットは全部5でできる版 DOLCE misto 愛すれば僕が僕が見てるとバンドル JM ハイフンティーをつけるとテストの作成されます
transcript 0: BOLT R スペックですが女性は2014年のドキュメントやね今実際2万ドル gemstone 出来上がった. JSP ファイルは development ディペンデンシーにミニテスト受かったのも無理があるスペック標準で採用したい人達っていない気がするんですけどねあと多分これあれじゃないですか何度か作ってるかね借金シアトル RB のほうじゃなかったでしたっけレトロアルミ我らがシアトルはある理由がミニテスト作ってますよとかそんな感じがするんですけど例にしても自分にしても標準で採用するものっていうの誰かに追従してる誰か入らせてくれる本体とか
transcript 0: そういうものに追従するわけじゃなくて単に試験を採用してことでいいかなと思うんですがそのぐらい rspec ハートミニスペックハイスペックじゃない日にテスト歯のに大分ぱぐらいってことでいいんすかね何だと思いますけどねでもあの test Unit どこ行ったっていう話はありますけど取りに行っては Ruby 本体を作ってらっしゃる方々の使ってらっしゃったそれはもうテストの量が膨大で移植できないんじゃないですかそれもあるかもしれないし後はあんまりそのテストユニットがあったりこっちいったりしてたの知ってたのと自分がレールで始めた時は回るスペックがまぁ一番華やかだったっていうのもあるしあのスペック自体がアレックレイルズですごくレールずに依存してるが良いか誰ですけどネイルズに依存した部分のテストが非常にやりやすくてなので
transcript 0: テイルズだったら R スペックでいいかなっていうのスペックのあるスピーカーこけた時に隣テストに失敗した時にチェックお九行で失敗しましたよって表示されるじゃないですかあれが Emacs ってゆえに他を使ってるとエンター一発で取れるそうでした気を使ってないんだなるほど何も今から何も取っちゃったかなはいはいはいありますね何だっけあるあるタグジャンプだとは思うんですけど当たったコンパイラとかでもそうなんすけどこれだったらここでエラーですよっていうフォーマットで標準的な誰が標準的なのは甘ですけど表示されているスペックだと何だっけ UNIX とかってどげんしてたかぁなるほどねそれでほとんど出ていたかタグジャンプできるんですよファイル名とそうですね相行番号
transcript 0: 着々テストしたんですけど Emacs のミニチェストモードってあるんですよあるスペックもなくてミニストップミニテストモードってありますねみねテスト標準でコケてもなんとそのホットキーが使えないっスよエラーにカーソル合わせエンター押してもそんなファイル知らんみたいになっちゃってそれであるスピーカーミュートに移行したときに困るよってすごい思ってオプションいじくり回して頑張ってミニチェストでもそれが使えるようにしてたっていうのを思い出があるかレポートレポート形式をいじったらできないのか確かそれで書いてたと思うよただそれ僕だけ変わるわけじゃないですかそうするとみんな変わるからみんなに申し訳ないなと思いつつやってましたがコケなければね表示されないんで
transcript 0: だろうあれも自分用にオプションを叩いてきり帰ってますね僕も入れてもらって普段はやえーとなんだっけあれスペック R スペックのコマンドラインオプション出てきたんですけどミニテストは好きにしたことはないそうですができそうな気がアホでも出来るんだねあいう何の何の出力はレポートなんかもあのスペック形式と言うか何と言うかこういうことやって結果こうでしたよいうのが並ぶレポートの形式にしておいてでジャンプしたいときだけその景色にスイッチするような使い方してますからアニマックスの rspec モードがすごいよくできててもほっときっ子でリトライもできるしなんとかもできるんだねすごい楽だったのにどうもね R spec モードトミーテストモードが共存できるするのが難しいみたいでもうちょっと経過であっち取られ
transcript 0: ネトラレーゼいまいちよくわかんないを決めてそれを治せるほど Emacs 腕前が僕にはなくて結構てもいい感じでしたもうあれですよ mmxl デッドのまま叩いてはいけんことになったほどね覚えられないんでショートカットが可愛いのは R spec だろうが見てそうだろうが共通したホットキー共通したメールが共通したホットキーが採用されててリトライとか結構楽だったんですけどはなかなかね特にねこのファイルだけとか今開いてるだけとか今彼はそれならテストだけ実行するとか俺らもすごい楽で使ってました今は僕も若い子なんでルビーマイン
transcript 0: でやろうかなと思ってるんですけどまぁ猫の Ruby mine がまだ僕の手に吸い付くことはなくて結構困ってるそんなこんなで R spec ハートミニテスト版がいるとしてエディターも含めていろいろやってるという現状におきまして結構雨人それぞれうるさいところがあるな場面だと思うんですけどもじゃあねと前置きはここまでにしといて今日までしていきましょう項目36ミニテストユニットテストに慣れようとやってこれと別種類のホームページで目次読むとなんと目次が違ってるんですよね多分ね僕ご飯なんですけど日本大日本以降の文字が書かれてんのかなと思ったんですが多分間違っててたぶん古い古いやつになっちゃってるのがあって mini テスト仕様テストになれよって熱海テスト単体
transcript 0: になれよっていうのがを変えたのでまぁ確かにユニットテストで単体テストって言っちゃっていいかなと思ったらまだ居て言っちゃっていいと思うねどっちに薬を吐いたのかなっていうのはわかんないところですけどおそらく本の方に落ち着いたんだと思いますというわけで本の方の目次はミニテストユニットテストになるようになってて内容については今入ったマイクロなことだが例えばね継承するクラスが違ったりするんですよミニテストのユニットのテストケースを継承しますので今は違うものを継承しなさいとかそういう細かいところがあるんでそこはちょっと省きまして省いた結果何が残るかって言うとぐらんぶるシューティングやメンテを楽にするためにテストメソッドを短く書きなさいねさらにエラー時により良いメッセージを表すために最も適した破産しても使うようにしましょうということについてはドキュメント
transcript 0: たくさん知っておきましょう僕は最初シープラのユニットテストから行ったんですけども心配ですそんな私も一つの手は僕だって行った時にはなくて顎が採用してたものではなくて単に Return TRUE 借りた方ですかぐらいしかやってなかったんでホルスが帰った時つまりテストで失敗した時イマイチなんで終わったからっちゃわかんなかったんですけれどもこのベビーで最初テスト書いてる時もこと=以外別にいらんやんと思ってやってたんですが確かに朝はとイコールだと A が B より大きな大きくないといけないっていうことを選んで出したいのに単にエラー断行女としか出せないんで朝とイコールだと音消しませんそういうのは着いちゃうんでまぁ確かに真面目にこういう大きいとか小さいとか等しくないとかそういうものをちゃんと使った方がいいんだろうなっていう
transcript 0: 思ったことありますはいじゃあ項目さんじゃなくな男でしょはいおっしゃる通りいうことないよねこれでストレスを溜めない学生はそうですねっていう絵文字しかないそうね相次ぎちなみに項目36がすごくてねもう36つはねこの本だとか決めたり細かいことで1234566ページだけで説明するんで個人的には実は全部次のスペック形式にしちゃうんであんまりお金ない他のメソッド名とか皆さんどうしてるのかなぁみたいなのはちょっと気になったりしますけどテストメソッド名前はテストメソッドの名前にはテストというプレフィックスをつけなければならないってのは一応覚えておくべきこのにあるんですけれども今もそうでしたっけ多分多分そういう形なそうでないと思って
transcript 0: メソッド以外のデータ用意するようなメソッドとか作れないんだってクラスをリフレクションしてテストって付いてるメソッドだけ引きずり出して実行するとやんないと他の関数作っててどうすんだと思うんだけどですねと思いますけどねそうだね言われてみるとそういうスペックとか時は忘れて次のはしかなぜ一旦つい項目3時に洗いますね盲目37人テストとスペックテストに慣れよう effective Ruby のホームページにある見出しではミニテスト仕様テストに慣れようとしようテストしてテストしてで委任を読みませんようなこの数十年の間に様々な testing 方法論が生まれて発達してきたルビーコミュニティはユニットテストとスペックテスト2代 testing パラダイムに分かれて
transcript 0: 俺がさっき言ってたの見てその箱を開けてくれたユニットテストは36ですね今後感じるで話した後テストテスト駆動開発との結びつきが強いと体で出てこれないことはより正式にはビヘイビアスペックと呼ばれてビヘイビア駆動開発と結びついていますとさらに引用が続いてスペックテストはプログラマと姫プログラマが共有する形式言語でビヘイビア SPEC かっこ使用を書くスタイルとをストップラビング言語の構文で書かれたビヘイビア SPEC を書くスタイルに二分されますとこの項目ではみ蛇はスペックを書くためのインターフェイスについて注目しましょうということなんですけれども悪さは後者だと
transcript 0: ここで後者が尽きたらわかんなくなっちゃうとゆみとセンスを履かスペックで下がって言えばスペックですとかですよって話でしたねそうですねプログラマーとプログラマーを共有する形式言語で相部屋 SPEC を書くスタイルはどういうことですかつまり英語とか日本語としないときは今までも使ってるところは多分9日あるんだと思うんですけどキューカンバーあってできた猫の本のある曲も出てきます今でも JS でもそれ系のやつあるんですけど何だっけいぐん飯店竹なんかそういうこういうこのときこういうことをしたらこうなるよっていう三段オチじゃなくてなんかそういう文法を使ってわりとその量は女です
transcript 0: メソッドとかアサーションていう以上にプログラマー向けの方ではなくて学的自然言語に近い書き方をするっていうのが何でしたっけいまのプログラマーと共有する形式言語はいはいはい色々あるのかなちょっとわかんないすごくは9回しかやってなくてそこで言われてるのが気に入っていう文法ですが金額 gherkin なんか乗り赤シャモジ夏子きゅうりの人生ですねキューカンバービュー看板はきゅうりでキュウリの品種はかけて育ったんだと思いますので迷わしようを英語っぽく書くと出してきてもらえそうですねで日本語でも毎日を書くにはかける
transcript 0: ベイマックスにもフィーチャーモードとかそんなありますよキューカンバーのものですかという看板がそのが金の形式をいい具合にかけるみたいなメジャーモードがあったりもしますね誰のチョコそこそこ辛いですけどねそうですねだって仕様書書くのは痔ですもんね需要昇格どころか文法に沿って使用しをかけてことだから結構人間にはつらい作業になるので結局その20つを満たすマジカルなヘルパーを裏に書かないといけないですよねあなんか Google 開いてこれこれこういう風な検索ワード入れたらこういう結果が返ってくるみたいなの日本語で書きたくなるわけですよねそうだね Google を開くって何やねんっていうのは実は裏で正規表現であるをするとあってことを書くと
transcript 0: そうそうそう書かなきゃいけないんでちょっと何言ってるかわかんなくないですかちょっとね慣れないと結構だから多分そこの裏側を支える人がいてね中野 Unit test 書く人とユーザより有罪に早く人とみたいなのが分担できるとかテスト担当にはやばいですねそうですねねあなんか R スペックブックもそんな感じでしたよエンドツーエンドでそういうその仕様ですとまず書いててそれを回してどこかでちょっと前から那須けどねピクミン動いてないのにエンドツーエンドのですが僕みたいなのをやってないねどっから俺とは別にユニットテストを書く人がいてみたいなのをやっていくといいよみたいなのが書いてあってその時はものすごいハープーンてそのあるスペックブックって名前に反して半分キューカンバーの本だよね
transcript 0: おしっこの勉強したくて買ったんだけどビヘイビア駆動開発についてたことでセットは実質泊まるところうまくいかにうまくしようとそれを埋めてくかっていうかで確かなスペック自体がキューカンバーを書いてる人たちの中から出てきたツールだったような気がしますねスペックの方が有名になっちゃったんですけどねまあそういうわけでビヘイビア駆動開発ってのはテストに入ってから生まれたものとはいえそういう者テストをこんな解体 RS んだったらまずしようという詩を書けばいいやんての要件を満たすようにテスト焦がしながら進めとけばええやんというのが迷惑とかそうですねメソッドとかクラスとかの動作に注目するんじゃなくてやりたいことをしようという大することで言葉が違うだけって違うよ
transcript 0: なんでこの本を読んでももうテストのコードが途端に英語っぽくなっててあのデスクライブとか行ったとかおつかいがあれですよねあの何で黒くなってなるほどとでこの本は空と地が気に入ったらそっちってのはデスクライトが一つを使って英語っぽいしーちゃんと仕様を決めてそっちから帰ってきて来っていうわけに行ったらキューカンバーとか R スペックの全部を見なさいよとねミニテストよりも深くビヘイビア駆動開発と密着してるんでそっちの方が好みなのかもしれませんという話で見てそろそろあるんでテストクラス来るときにはでぃすくらいぶ testing の定義には一つ買ってやっとけばいいんですでもそれっぽいことができますよと多少メソッドも使えてねスペックテストではてきて吸ってないことを今回のビヘイビア駆動開発っぽいテスト
transcript 0: エクスペクテーションメソッドを使いなさいとエクスペクテーションメソッドダナンぞって言うとまぁモジュールのドキュメントを読むとの朝のと同じでこういう風に使ってくださいねちょっとだけでまあそれを選んでくださいってあってでそのそのエクスペクテーションって何ですかって言うとこういう S Picks BOOK 133から引用すると移行可能なサンプルコードではこれから起きる書くわけで見る8分これから起きることではなく起きるはず should 8分のことをエクスペクテーションとして設定しますとで実際 R スペックのエクスペクテーションフレームワークには should という言葉が埋め込まれていますね昔のスペックはめっちゃ見ましたよね知ってると歌手って何とかって言うんですねこれに何か今いくスピッツに大きかったんですよね道もまだに中国と
transcript 0: 思いますよ水晶という学生証の書き方がそうだったとかそうですねなんかこの辺りの話をすると非常に長いのでサクっと言ってもらえればいいかな僕は僕はどっちかってーと subject and Shoot 花田エクスペクト貴方に慣れようとかね僕もこの前みんなに説教されながら頑張って手術が英語だと手を振り注ぐスペクトルしろって言われて憤慨した記憶があるんですけどそんな格好の時に身にもあはれスペック疲れがだいぶきましたねあの JS のフロントエンドやられていらっしゃる有名な方もねネイルズが嫌いなんじゃなくて R スペックで降格とか言われるのは嫌いみたいなことをおっしゃってたので分かりません分かります僕もそれを出します結果ぼくえんどうしてかっつーとパワー里一択です our part 2
transcript 0: 高橋匡嘉 JM ですねと JA 何から始まったんだろう和田さんがやってるやつなんですけど見てその間丹波屋さんだけなんですよ testing Framework じゃなくてあさちゃんだけでパワーさとデカさとんどんだけでも出てるレースでも Ruby でもパートです5分でもフルマークテストフレームワーク何使ってるかじゃなくてもうあさりちゃんでいいよってもうねあのエクスペクテーションとか抹茶とか大嫌いですアイ222のスペックの書き方自体は好きなんですけどやっぱりその後ももまさにおっしゃるとおりでエクスペクテーションがどうとか抹茶がどうとかそんなこと気にしたくないんですよ僕はそういうのうるさくお前こいつかよあれよという態度だと思ってました
transcript 0: あの何が変白道で気に入ってる間の一つは僕グルーピングです他のクラスとメソッドだとグルーピングしにくいじゃないのこれに注目してますよってこの中でこのパターンこのパターンこのパターンありますよみたいなの書きにくくないですかそれはユニットテストがある程度の組み合わせのテストですか例えばこのメソッドの挙動についてこのパターンこのパターンこのパターン書きたいですって断った時にその子のパターンこのパターンこのパターンっていうのグループとしてかけますなるほどね普通にクラスとメソッドで書くとそこがなんかフラットに並んじゃうじゃない僕はフラットに並ぶ上にあの下手すると一つのテストに全部埋め込みますねずっと雨ですねそれは嫌だなそこだけなんですよ実はそれは多分
transcript 0: 僕と渡辺さんの会話を予想して言うと例えばどんな例えばあるかなちゃん小テストしなくちゃいけないと出ればちょうどいい値と OK 八代どちらかで三つテストしなきゃいけないというの時に僕が僕が各テストは正しい値が買えるテストって書いてなんかで三つ食べちゃうってのが僕のために下がってるのは正しい値が買えるテスト大きい場合普通の場合小さい場合をグルーピングしてそ書きたいとなんかそれそうです分かりスクラブとイット何形式だとグループ分けをして前に架ける橋メソッド名のルールに引っ張られないんでなるほど確かにリスクライブと一刀についてはここに書いてある通りテストをつけを出さないですかねそうですね
transcript 0: 文字種類とかも完全な関係ないねもうもうほぼほぼそれだけですね一番気に入ってるのでエクスペクトがどうとかは気にしたくなくてもパワハラと言われているほどねなるほどねブライスねテストした時の問題ってこと成功した自分にもレポートが美しいことで伝統的にはこけた時の表示が非常に強力だってのパワーさと素直なことね中身を解析してこの例えばこのオブジェクトはこの時点でこの値を何とかってこのメソッドを呼んだらこのあたり.メソッドなんとかって言ったらこの値っていうのをそのこけた時に全部出してくれるんであれ俺が期待してるあたりと何か違うなーってなった時に非常にリッチな情報が手に入るねそこで打ってやったしな
transcript 0: いいですね頑張ってスタンプじゃなくてそこで何 analyze しなくていいしなくていいですねメールでいいとか B とか糞なるほど何のキャラクターの結果にそれが張って出る確かにねその後がないばっかりにないばっかりでわざと使わないばっかりにさっきも言ったとおり抹茶を正しくして出てくる表示が君には期待してるのは大きいらしいけど小さかったよとかそういう風にしてもらえるとエラーメッセージが見に行って話して欲しいなんだけどそうじゃなくてパート使えばどの道ダンプが出るから見ればわかるじゃんそうですね僕が思ってるのそっちですねなるほどねエクスペンションって名前とはこれはエクスペクテーションズエクスペクテーションエクスペクテーションて言ってればいいなんで最近はエクスペクトっていう単語を使わなきゃいけないのかというのはなんとなく分かったっていうのがこの子
transcript 0: 37って感じですかねはいはい買わないなってテストの書き方って渡辺さんがいる会社は寒さが決めればいいと思うけど基本的にプロジェクトでやっぱ最初に決めるんですか千夜震えも枠ごとにおすすめのあるんじゃないんですかねではもうないのかな伝統的なテストユニット型はないかもしれないですねでももテストが見ただけでここを誰が担当したかわかっちゃうレベルのテストってあるじゃないですかママとリクエストを受け付けるが受け付けなかった人ところなんですけど僕はワシとホント自分が試したいところだけ試せてテスト OK がある程度かいたらもうすぐクリックしちゃうタイプだが少なくとも多分この DDD スタイルのなんかもわりとハッキリ言われてると思いますねたとえば行ったの中にあると三つの角ってのは埋まりと明確に NG
transcript 0: お使いのような気がしますけどね気にしてたらきりないしねなんかそんな感じに大体その上真桑の文化圏がそうなってるような気がしては今いくつも書けとか大体後期待っててビフォーあとがあってその準備にコストが凄い高いやつですがあるとかいちいち英語のラベルを言ったとか書いてくのが面倒くさいのかなそういうモチベがあるかな明らかにななりちょっと鉄書くだけなのは勘弁してくれやってくれて気持ちが悪くなったのは分かりますけど多分そういう人はビヘイビアドリーム bdd は向いてなくてミニテストの Unit test 使ったことなんでしょうねきっと私がめんどくさいのはありますねマート越すとはと一応メモカとかして何
transcript 0: アナルって何とかなるんですけどでもかとかその他もろもろ使うとコストも減らせるとわかってんですけどそのそれがしんどいカロリーが高いままその辺はちょっとこもってきます項目38 mock OBJECT で決定論をシュミレート仕様決定論とかよくわかんないんですけど魔法使いて男も例えば Web API とかさっきも言った前もって用意する準備がインターネットがやってくるとかそういうものについては外部から切り離したよねそういう時は僕を使おうねっていう話この子もかなりのサンプルコードだともうテストの時にメソッドを奪っちゃってテストに都合のいい女外に入れ替えたりもしてますちなみに同入れ替えてるかって言うとこのサンプルの方では Web サーバーのが元気かどう
transcript 0: を調べるっていうライブラリを作りたいとクラスを作りたいとどういう層になってるかっていうと acdp でこんにちはって言ったら stdb でこんにちはって言ったら Hey Siri 今日はになったみたいで僕の返事どうしました HP で何かお話掛けると何かを話しかけてそのまま内容は帰ってくる帰ってきた場合にはこのサーバ生きてますよっていうクラスライブラリを作りたいと AC デビサバに話しかけるメソッドでゲットっていうメソッドを作ってるんですけどそのゲットっていうのを乗っ取るとターゲットというメソッドは本来はゲットと言ったら shb レスポンスを得るというだけで目卒なんですけれどもそこについて get を乗っ取って木のレスポンスを返すという実際に知らせさせず木のレスポンスオブジェクトを返すっていう風に則って返してますというサンプル数ねそういうものを使うといま言って
transcript 0: 整ってるんだよそれも Get test なっとらんやんっていうのが正確なくらいですかなんでそういうメソッド交換したテストは本番でエラー起こすみーテストコードに起こす危険があるんで駐車やとさらに内部実装を知らないとこのメソッドは内部的にあれそれこれするそれするっていうのは知ってないと書けない変なテストなっちゃうんでまぁ注意してねとさらに今入った木はミニテストのライブラリのミニテストコロンコロモックとえみテストモジュールの mock クラスの使ってるんですけども目の最後にテストの最後にこのオブジェクトモックのオブジェクトを作ったらこれのベリファイってやつを選んでくださいとエビリファイっていうのを読むと園木邦敏したメソッドがちゃんと全部呼ばれたかっていうのを確認して呼ばれなかったらお前は干支約束ちゃうやんけって言ってこけてくれるってのが
transcript 0: 子供の良いところらしいですしてましたあのあのミニテストモックはあんまり使ってないですけどテストダブルは大好きですよそれでも作るものがそれですとダブルっていうのはそうそうですねテストの時に良い具合に動いてくれるオブジェクト大宗匠と守っくっていう事だがめちゃくちゃメジャーなんですけど僕が一番使ったスタバの方です食べてみたことあるなぁって何なんですか何でみるんかなともこの話自体結構長いですけどで最もよく効くねスタブって何だっけどこで見るやろ俺だといえばさっきの話でいうと TPP を叩くメソッドがありますと僕がよくやってるのは例えば http を叩いた結果のオブジェクト
transcript 0: 取得した後何かをするみたいなので価格じゃないかなんだけどどないして行って火を叩かずに結果のオブジェクトが帰ってきたことにしてその後の処理をテストしたいわけですほとんどの場合ってそれが今入ったサーバーが元気かどうか試すえとねさわが元気かどうか試すのでゲットそのものをテストしなきゃいけないからごめんなさいねじゃなくてゲットの受付でこんにちはって言ってこれじゃ帰ってきて中身が今日はかどうか試すっていうメソッドが再生するようですがこの時はこういう挙動になるこの時はこういう挙動になるってのが決まってていたインターフェースをテストするんですけど agdp に Ok の帰ってきたぞ帰ってきたからこのクラスではこういう仕事使用 Ok が返ってこなかったらこのクラスを超え仕事しようっていうのじゃないですかやりたい事って何のでこの http アクセスするメソッドだけスタブアウトしてサブアウトって表
transcript 0: なるけどそんときにそのメソッド置き換えて http の結果をよかったパターンと悪かったパターンに置き換えてどっちのパターンのメソッドのリアクション顔も定義してそのメソッドの結果を受け取った人はどういう挙動すべきかっていうの書いてかそれそれここに書いてある木と同じ気がしますねここの木はね違うんですよ僕はどういう風にさえそのメソッドが呼ばれた彼は呼ばれなかったかをテストするには今後悔してる限り挙動としては同じように見えるんですけどこういう風に動いたよこのメソッドはこう呼ばれた横尾動いたよっていうのをテストするのがモックで多分はそのメソッドそのままですとしない乗っとるだけ違いがマジ
transcript 0: これね長い必要とモクレン使いこなせるんだとめっちゃ強いんですけどそれでその違いはいいことあるといいことあるかアイマスアイマス明確にありますどうどう違うかどういうことありますかなんて言ったらいいんだろうなボクが書いたやつ2011年の日記がありますけどあれが貼っとけばいい子って呼んだほうがまだわかるかな今日はちょっとドリンクください後で買ってきますじゃあまあとりあえずそれはちょっとね他のページ読むことにしてこっちに書いてあるやり方としてはもちろん Get が成功することもあれば失敗する事もありますよねゲットに成功したかゲットで失敗したかっていうのは誰かわかるかってたその response オブジェクトの中身を見たらわかるモックにはサクセスはてなっていうメソッドが入っててそれが
transcript 0: TRUE を返したら成功オールスを会社失敗であっててさらにさっき言った通り今日はって言って今日はが帰ってきたら成功で今日に帰ってきた失敗飛び出す中身を返すというメソッドもあるとレスポンスの中身は何でも口に入るべきメソッドはサクセスっていうメソッドとボディっていうメソッドがモックとしてテスト話さなきゃいけないメソッドでね成功する場合のみボディを読むっていうことが分かってるねここでは成功するパターンのテストをするときはサクセス末流を開始ボディには今日はを埋め込んでおくという風に書いてもう一個作ると失敗するパターンついてはサクセスには false を回すっていう風に書いてやれば魔力をテストできますよっていうことで木を作ってチャイナ服の作り方っていうのは実にテストコロコロモップ
transcript 0: ニューしてそこに届くジェクトに対してエクスペクトかっこメソッド名カンマ戻り値と書くとそのメソッドのお歳は関係なんでもいいですよというので簡単に僕が作れますよっていうのとさっき言ったベリファイってメソッド呼ぶことでちゃんと用意したメソッド全部読まれたかどうかすら確認できますよっていうのがこの章の説明してるところとさらに良い薬の話をするとしたぶってことがあってそれは忘れたのホームページを見ると分かるんでそれを見ましょうということですね1国のやつよりかはなんかもあちこちにありますけど何かな何だったかなままはい読んで下さいの兜木についてこの記事は改修工事が3年以上経過してますでもその辺がブームだったんだねこの2010何年か前です
transcript 0: マーチンファウラーじゃないかなテストダブルっていうのはなるほどねでそれの日本語訳の提示があって非常にあっさりしてるんですけどこれ読んだだけだとさっぱり分かんなかったんだけどどっちも自分で使ってみたらまぁなんとかわかるようになったかなーみたいなこれが分かるようになってからは JS だろうがなんだろうがのやりたいことは割と記述できるようになりましたね後で今聴いたのトップですかと聞いただけで選んだけどさっぱり分からんでも字面で覆うのはすごく辛いすねええああそうなんだよここになんぞカスタムアウトはこのメソッドのテストじゃないんですよねこのメソッドがこの場合はこういう風な値返すよねっていうのにただ置き換えるだけそういうことなんですよねその結果を使うほかの女
transcript 0: 本当のテストのために使えるってだけだしたのってもしかして早くだけってこともそうなんですね僕はオブジェクトの話じゃんくーあそうですか二部はオブジェクトに対してお前こういう風に返事しろ問いかけるとことそうですなるほどオブジェクトが一個でいいんだんでもいいしるびーとかも今時のやつだと思って元のオブジェクトの書き換えてかまあなんだろうな内部実はよく知らないですけど海とかだと思う別にメソッドエイリアス全て年12できるした一部のメソッドだけ違う挙動に住んでなのでなのとそうですねという風に使ってますそれだけでなくでいいねたとえばさっき言った8 D オブジェクト渡す時に持っ降ったらまずモックオブジェクトが行ったり来たりするように書かなきゃいけないんだけどそうじゃなくてなんか員さん数
transcript 0: このインスタンスのここは蛇だっていうところはとりあえず Return TRUE しといてとか出かけることねなのでそういうところを全部メソッドにしちゃうすごくまず最初に考えるのってサブアウト可能なメソッドに切り出し得な道を極めるとことでそれをうっかり例えば定数とか変数とかにしちゃうと面倒くさくなメソッドにしとくとすぐ乗ってるんで僕もルビーてその方がいいなって最近わかってきました連絡来るぐらいだったらたとえば一ページあたり何件かって言うの定数を返すっていうメソッドにしといたほうがいいなっていうのは最近すごく感じるほどでも降ったら例えばじゃあ1ページあたりっていうメソッドが呼ばれるからそのメソッドを生やしてっていう早スモックを作るんだけどキタムラ
transcript 0: 生えてる OBJECT オブジェクトに対して林とけば挙動がこっちでコントロールできるメソッドに則ってできるって事ですねそうですねでもそのクラ特定のクラスだけテスト対象のクラスを直接相手にしてる時は例えばテスト用に継承しても別に同じなんかそんな依存してるやつ例えば end to end のテストレール喘息とデール喘息とエンドツーエンドのテストを書いてるんだけれどもこのモデルがこういう挙動してると多分ビューはこうなるみたいなのは出たすぐ書けるモデルをスタートしてこうするっていう風に変えちゃうとかねアハハハ生きることをどうやって説明すればいいんかな俺の事理解よそんなことです
transcript 0: たとえばユーザーがログインかどうかっていうものをとレコードに定義するレコードとかアクティブモデルの OBJECT インスタンスが伊豆ログイン破るログインやブルっていうメソッド生やしてでログインできる場合にこうするっていう処理をテストしたいときにも多くの場合だったらユーザー吸引酸素作るんじゃなくてもの印刷を作ってパソコンにログイン破るが鶴岡 S っていう木を作ってオブジェクトを渡すんだけどスタンプはユーザーと印刷を作ってなんか知らんけどお前ログインお風呂は鶴岡 S get メソッドを鍛えることができることですねそうですなるほどねそれはなくでいいねと内部の実装をどうでもよくなってとりあえずそういうのがあるねちょっと作っちゃうっていう書き方にどんどんなっていきますねその書き方トリロジー
transcript 0: 内部的なファンだとそんなモノクロっていうのをメソッドに書き出しといて後で入れ替え可能にして送ってのスタバを取って分かりましたそういう便利なは今思えば孤独が一発で理解した Web ページにも貼っときますんで皆さんよろしくお願いしますがきっちりに貼っとくはここにありこんな母だったってなった俺だけな気がするなこれね本当になんかこういうことやれたらいいのになっていうのがない状態で聴いてもねその通りですねなかなか難しいこのサンプルはそういう物的なことが出来ないから見てその木を使ってこうやってるって言うのはここから北使うのがいいのかなってきましたとか合いそういうわけで項目3.8あって次の項目39
transcript 0: 効果的なテストを追求しようこれまたねなんていうのはこの抽象度高いと言うか骨まであるあるのでバイクでハイコードのハッピーパスと例外パスの両方試すにはファイル test properties テストツールを使いましょうとでもいきなりハッピーパストガレーダーパス萱町ピンとこないんですと説明するとハッピーパスっていうのはテストをしているコードのすべての前提条件を丁寧に準備して有効な入力しか与えないテストのことであるこのコードは完全な世界で動作するであろうかと言っているようなものである程度のハッピーパステストらしいんですけどまぁ正常系異常系が得意な奴ですねばユーザーは半角日本語を使うこともなければから文字を入れることもなければスペース一個でパッティングしてくることもないからテストもそれ前提で作ってたやつですよね
transcript 0: ですよねそれぐらいとりあえず寝よなんだっけさっきのログインは僕じゃないけどとりあえずユーザーできるかどうかが問題だからとりあえずそれでいいよねってやっちゃうのがハッピーにハッピーバースデーですねまままーねー例外パステストと Happy Birthday to を試すにはご飯すテストとパッチテスト十津川村続きなんですけどそれをまずテストテストとはなんぞやってるとデタラメな対応を与えるテストのことを外すとと言いますよってどのぐらいでたら目買ってたランダムな値を使うぐらいがデタラメなぐらいのデタラメでこの本で紹介されてるはずパート別に悲しいんですけどこれはまずランダムのジェネレーターで種類が選べてデータ設定た DS レポ書くんですけどデータってどこでどういうランダムな値を書くかっていうのをまず書いてねその次のデプロイ
transcript 0: どうしてそこでテストコード書くとねこのパートは狙いはクラッシュするとか例外が飛んでくるっていうのをテストするツールであってもかけたらコンテスト袖丈たら一日中とかもずっとこっちがマニアに停止するまでランダムな対応がかかって続けて延々続くというツールらしくてなんで1日戻りてもチェックしなくていいそれではねられてないっていうのがこのはずバートって言って私飼い猫いた自分で作った AC JP サーバーとか謎の WEB socket ライブラリとかそういうものをテストするには多分こういうのに使って本当にこれ一日中動いても大丈夫なのかっていうテストを行うするんだろうなっていう風に思いましたずっとツールプロパティテストツールっていうのはこれはもうあの名前の通りで
transcript 0: の辺りで車を持って操作ユニットテストとかスペック SPEC てその場合はもう与える値が決まってないと変な仕様になっちゃうのかなこれも実施中ですのでもなんかなならもうミスタープロパーっていう mrproper でこれについては他消えたデータ課金すれば影が一つはこれがデータ雪で引数のクラスを指定するとたとえば角括弧インテジャー完売じゃ完売って者で書くと次の各プロパティ Set Level test connection 手相書くところでその引数に行ってくるんでそこでアパート書いとけばオッケーだよという映るらしい使いますよこの美味しそうなんだでももう
transcript 0: もデータの種類とかにヘビーな弦をそもそも販売作ってないとかもしれんですね多分ね僕ら僕らと言ったらまなみさんに悪いかレイルズの世界とかで生きてると多分これをかかない書かないというかあまり必要とされてることじゃないと思うよね何かあのそのミドルウェア的なやつだといいのかもしんないですけどねとまあこういうテストツールもありますよというのでなのでそのハッピーパスこんな値が来るであろうっていうのを本当に予想しないでやりたいんだったらこういうのもちゃんとやれよね相次ぎテスト実行されたからといって必ずしも正しいコードというわけではないためコードカバレッジツールは間違った安心感を与える可能性があるかフルカバレッジ100%で
transcript 0: うん安心するかえなんか逆に怖いんだけど一発でコンパイルが通ってる卵が通ってテストに来てなかったぐらいの気持ちになるんですけど世間的にどうなんすか彼はヘッジツールが噛まれても気にされる人は気にされるんですか昔やってましたけどあのようはテストコードがない状態で焦っちゃいましたてまう噛まれたようですねではある程度までへそかけたかなっていうのが分かるようにするためとかをテストコードだんだん育ってきてるよっていうモチベーションのために使うみたいなのはありますけどなるほどねギットハブの緑林田ソース治りがこんだけだから OK ですみたいな基準に使うことはないさは100日99日はその目を三角にして追いかけるじゃなくて
transcript 0: 20時だったら二重が三重になった3時の40になったっていうのを後喜びの気持ちと共に見るものとなくて来れそうですね後の多いところと少ないところの差が分かるようになるとかねあーなるほどねすごい形はすることありますけどまぁでもほとんど最近は見てないかなだからね何だっけオーブのゲームが貼ってあることありますよねありますね昔は全菌数でそういうプラグイン入れてなんかグラフ書かせて喜んだりしてましたよ言われてみるとそれ確かに何て言うの顧客満足度お客さんが喜ぶかどうか程度は何パーセントかはカバーされた方がいいやろだとかっていう気持ちではなくはないかあんまりなの乱暴に作られてないよって言うぐらいではないかとレディースの接続こけた場合とかそういうのを書こうと思えば描けるけどどこまで
transcript 0: レスキューセットとかカバレッジするんだって言ったらそれで全部カバーする例外発生させろって言ったらまあ組み合わせは無限にありますもんねアホだねじゃあ今言った通り少しずつ成長を感じるとか全くされてないとか言う50パーを超えて溶かすとか0日50日100日100円ありすぎだから05日50日ぐらいの気持ちで使うと良いことが多いことですねきっとこれなんかね100台100台やったぞやったぜって喜んでもそうですが間違ってる可能性もあるからそんなんで安心してんじゃねーよってそろコーデが欲しいですねなんですかここでは教え何ですかで遊ぶとね間違った安心感間違ったか安心感を与える可能性が空いとってねどんな間違った安心感を与える可能性があるとか日本語おかしくないこれでもないかないととか今亮一とかにもよるような気がしますけどね
transcript 0: if 文分岐をスクショしなきゃいけないお仕事な俺はやだのだったら今テストコード書きますけどユニットテストがオールグリーナのスクショ撮らなきゃいけないお仕事とかは聞くけどなぁ相次ぎ機能を書いてる時にテストをする方がテストするよりずっと簡単だこれ一番大事な単語が抜けた説明をします昨日書いている時にテストをする方が後でテストするよりずっと簡単だまぁ俺もそう思うよと思うけどでもなーっていうのがだいたい同じですかとかいるときに分かりませんこれ仕様変わるだろうな今はこれで飯食ってるけどて思うとどうしてもないよその辺大人になると決まってからかかっているなるほどねそれよりも先にも動くの動くの店たいなって気持ちがあって動く
transcript 0: るためにもテストを書かなきゃいけないんだなって思うことあるんですけどだいたいさっき言ったビヘイビアか単なる Unit test 買ってあるとも単なる Unit test もユニットテスト最悪ここで TRUE か false 帰ってるのさえわかればみたいなテストは書き方になってなんかいまいちピンとこないですとなっちゃんことが多くてしょうがないから言ったんここを動くわけでテストもまあまあ言ったら動けばなっちゃって特にね end to end のテストとか飴って時間かかるんですかやりたくないすねできればそうなんすよ俺は早くイテレーション回しても回さなくても国が見れる画面を作りたいって言ってるのにエンドツーエンドテストでやれドームがここにここがあって OK ボタンを押してこの画面に遷移してっていうのは一個ずつ作ったらマジかんか
transcript 0: どうしてもサボっちゃんってお客さんが OK でた頃にやっとじゃあ客さんが後で仕様変更って言ったときに前はこういう動きだったんだねっていう記録が残るくらいのレベルのテスト会場のごすっていうのは何か僕のやり方特定どうもねだからねなんかちょっとさっき言ったもっくじゃないけどもうちょっとねテストに時間がかかるとか外部と繋がないとです出来ないっていうものを相手にしたら突然俺のテスト関数行数が減り始めるって言うのは僕の中で確認できてる子とまぁテストの項目難しいポイントで何があって僕がやってるのって基本 tdd だと思ってるんですよね BBB じゃなくて Wii でもいいんですけど8話
transcript 0: アドテストによって確実に品質を保証しますよレベルのテストを書いてるわけではないのでなのでこの先のカバレッジの花そうなんですけどなるほどで目的物を受け取ることかな何のためテスト書くのがあるよねここではどっちなのかなーっていうのはちょっと思ったりはしていますねていうのとただ一方でキリリとか BD の文脈だと不安をテストしなさいって言われるんですよ何で何言ってんのかわりと人に酔っちゃうんですけどの僕も表も入ってんだ前のあんまりやりたくないけどここ不安だよねって言うか何か何やってるか俺もよくわかんないよねみたいなところが待っててなんか悪意縛って角みたいなところはありません難しいロジックは心配なことが多いよねたとえばさっき言ったーログイン
transcript 0: じゃないけどなんかこのユーザーはログインできるかどうかっていうのは実は内部的にはブラックリストに載ってないかとかいう輩は通報が何件以上ないかとか良子いろんなことを調べた結果ログインできるログインできないってのか S っていうメソッドですよってなった場合複雑だからまともに動くかすごい心配だからそこはテスト一発でテストできる人来ていう気持ちになりましたねそれ間違いなくでその後書き慣れてる領域とかそうでないかみたいなのもあってその外部の API を叩くっていうのもとてもまあまあまあ http のこういうやつだよねみたいなの分かってるんだったらさっき言ったみたいなので先に http 叩いてこういう結果返ってくるよねみたいなので揃えてでその
transcript 0: AKB の結果をファイルに落とすといて手を叩く部分をスタートアウトして正常のパターン A 7パターンでの返してそれぞれが動くようにするみたいな事をやってテストしたりはしますけどこれがどこれって分解できてるからかけるんですよねなるほどね分かるわよじゃなくてそれぞれの中の機能を同文回できるかってのが分かってるからこそかけてるんで書けないときは家で一旦送ってないやっぱやりますの動かした後にこれ変だなーってなってどっからバラすみたいなのをやったりましょうね最初に家で作ってはこれってこういうことがあるがいうことかとかこの機能が作れないといけねえよなーってなって初めてそこでモジュールを開けるとかクラスを開けるとか俺はこれに関することだってことが分かってきてどんどん分解できてくっていうのは分かるんですけど
transcript 0: 富山市八決まんないと決まんないなってきますが止まる時がある場所によると思うので内部的な場所なのかビューに近いところなのがあるけどあると思うけどなんてねお前何でこのテスト書かないのって言われた時に言われるのは大思うのは大体それかなあだってゆう多分エリアで作ったけどいつ変わるかわかんなかったしていうことが多いんかな今日の挙動そのものに例えばあの枚まで入れず僕らの会話では割といぼうじゅんスタンダードな知識として使ってますけどレンズそのものに不慣れな人はどこまでテストするのかみたいなねやっぱり RC フロントエンドフロントエンドでねなんかこのフレームワークはどういう動きになるのかよーわからんとかですこれに+ plugin のこれがよく分からんとかの要素が増えれば増えるほどテスト書けなくなったりはしますのでどこで切ったらいいかよくわからんっていう確かに僕がこの前メール
transcript 0: 通貨表示ビューヘルパーってある文字と数字を与えると返答に通貨マーク区切りのカンマ何桁ごとにカンマ区切りのカンマ小数点2桁っていうのにコンバートしてくれるっていう龍のヘルパーがあるんですよたとえば35000円って言ったら35巻まで600に変換してくれるやつでユーロだったらユーロマーク1,199ドット00に変換したいですけどそれのまともに帰ってくるかどうかっていうテストを書いたんですよなんでかって言うとそのビューヘルパーって設定してあげなきゃいけないですよね今は言うのだからこうとか今は選んだからコーデで育てると書いたんですけど気がついたらいやいやこれは
transcript 0: このテストこのメソッドの振る舞いをテストしすぎてて的確このメソッドがあるから以上したのにこのメソッドが俺が望む形かどうかっていうのを知るのバージョンが上がるたびに大丈夫かどうかチェックしてるだけのメソッドになってるなーと思ってそれって役立つといえば役立つけど書く俺の仕事があってすぐ思ったことある奴の顔を使ったやつの仕事だろうって思ったこともありその辺のねこれバージョン上がったら可哀想かなとは変わらなそうかなっていうのがなんか匂いとかあるんでしょうねきっとありますねではこんな感じで次バグの根本原因を探し始める前に失敗するテストを書こうそれはそれで終わりますけど end to end のテストでユーザーに近いじゃないですか
transcript 0: 誰々ユーザーがなんか加藤さん声おかしいんでねと言ってた時にはもうこのエンドツーエンドテストも書いてほしい自動で多分だいたいね検索をすなんとかおすこれとこれのオプションをオンにして検索ってやったらこれでこれが出るはずが出てこないってそこまで日本語ができてるんですが痛いじゃあもう先導してくれよっていう気持ちが少ないので実際どうなんすかねではバカの根本原因を探し始める前にはまずその end to end ですが入るでしょまずは真面目にやるんだったらもう全部が全部 end to end ではやらないけどまあそうですね再現するテストは書きますしかも3万レコードのうち2万レコード見つかるはずが20002レコード見つかりますとかって場合は3万レ雇用射撃でしょ本当の本当にテストするんだったら本当に再現本物サイエンティスト書こうと思ったらそういう場合は
transcript 0: そうですかそういうできないできないと言うが見つかってしまうとその前に今切り分けしてますよね大体わかるんだってねそのユーザーの操作から言って検索でこのオプションでこのオプションでこのオプションがある時に変なんだろうなっていうの書いてね実際は確かに神戸にしかないとかは確かにレコード余計に見つかって見える気がするっていうコードを書いてあった再現できたかってなってからそれがテストが失敗中ですとかこういうことでまずは変な変な挙動を肯定するコードを書いてそれの逆アパートを書けばいいのですねいやこの中からは2万レコード見つかるはずなので2万にレコード見つかるっていうテストを書いて20210未満だよってことによってはテストコードに置き換えてからなんでやろうっていう風に探っていけばいいことですよね
transcript 0: まあまああの失敗したことのないテストコードはもう信用ならないってやつですよねそれハッピーすぎることないのはずっとずっとずっとグリーンしか出ないでそこに可能性あるんであ近いねわかるはちゃんとレートに鳴るように確認してからやりましょうかね何だっけ僕が良くなるのは朝とちゃんとにに合格ノットイコールと朝と書いてようがしてあって大丈夫ちゃんと赤犬 telnet 確認してから形を削ってない聞こえるのも確かには同じ事をやってるかもしれないで最後はこの本が書かれたことにとっては当たり前だが欲しいんですけど出来る限りテストを自動化しようって書いてありましたうんもうそれ以上でもそれ以下でもなくむしろ自動車内テストでどうすんだ10話なんだけどねでもねもうらはできないけど
transcript 0: 環境でオールグリーンなのか確認してからプルリクするなんてできないですからね3で今の cicd あのギター部のブランチをちゃんとするとかでてきましたがいいことだと思うよねそうですねうっかりしますからねあれがないとなー行ってらんないよなって逆にアレがない世界って何も想像できないのかそれがそれがない世界結構あるんだよ何とか頑張って啓蒙していくしかないよなあその辺はな愛と勇気で最長の1時間31分45秒を記録しましたよかったね4個しかないんでテストの次のツールとライブラリメモリ管理とパフォーマンスが良い家に着いてますかあったら言っといてたいなことになってね明日休みでよかったですね座布団は持ってこないんだいこうてつかなそうねそうね寝てた結局ねテストを書くのがめんどくさいではと
transcript 0: 10日間書くのがめんどくさいなーって言って先送りすると白い目に遭うからいつか書かなきゃないっていう気持ちがぐるぐるまわってるんだけど書くのがめんどくさければ面倒くさいほど先送りされてるじゃないですかあそうですか今はちゃんと項目とカスタムとかなんとかだとかあるスペックではミニテストなんとかかんとかだっつってたんとこ振る Mac とか考え方に沿ってちゃんとやるぶんにはツールが揃ってるからそんな難しくないよっていうことをまず業者に来ないよねきっとをかけかけて言ってもわからないんですかデザイナーテスタブルな行動になってないところからじゃあテストコード出してってくださいって言われても結局結局その全部 end to end でめっちゃ辛いみたいなことになっちゃうんですよ今日の行動をテストするためのメソッド用意しなければですかね
transcript 0: Java メソッドがもう片手での5行ぐらいのメソッドしかありませんよみたいなんだったゼネテストカゲの簡単なけどそもそもねテスト自動化の文化に入っていないんであればなんぎょうのメソッドがあるか分かったもんじゃないしこのメソッドが1万ごあるからいいけどね5万行止ソトイコやったってそいつもだいぶ厳しいですねていうところから何だと思います喋ってると2時に行くねこれねいくらでも話せるんだってね俺の方から話をしたいのは馬場スクリプト版の話とかユニットとかそういうプランも最近はあるんかなそういうテスト環境についてとかテストするとかめしや CD の話まで全部ファミコン出来るんであとレガシーコードもあるとか大好きですよ僕は本当の音は結局話はいくらでも発生できるところがあったここな
transcript 0: ピーリングリーダブルコードとかねはい今日はこんなとこですかねこのとこに一人でやろうって感じですかねそうですねこれ以上話ししたければ金沢 RB に来てくださった時ですかねそうですねそれはもうヌキトモですね勝手に名前だしちゃって恐縮ですが大好きてほしい常愛大発会はこんなところでこれは明日1日かけて編集してなんとか火曜日に出したいなと思いますはいはいございましたありがとうございました
